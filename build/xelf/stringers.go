// Code generated by "stringer -linecomment -output=stringers.go -type=Class,SectionType,Data,OSABI,Type,Machine,SectionIndex,ProgType,sectionFlag,progFlag,NType,SymVis,SymBind,SymType,RX86_64,RAARCH64,RAlpha,RARM,R386,RMIPS,RLoongArch,RPPC,RPPC64,RRISCV"; DO NOT EDIT.

package xelf

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ClassNone-0]
	_ = x[Class32-1]
	_ = x[Class64-2]
}

const _Class_name = "unknown class32-bit architecture64-bit architecture"

var _Class_index = [...]uint8{0, 13, 32, 51}

func (i Class) String() string {
	if i >= Class(len(_Class_index)-1) {
		return "Class(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Class_name[_Class_index[i]:_Class_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SecTypeNull-0]
	_ = x[SecTypeProgBits-1]
	_ = x[SecTypeSymTab-2]
	_ = x[SecTypeStrTab-3]
	_ = x[SecTypeRelA-4]
	_ = x[SecTypeHash-5]
	_ = x[SecTypeDynamic-6]
	_ = x[SecTypeNote-7]
	_ = x[SecTypeNobits-8]
	_ = x[SecTypeRel-9]
	_ = x[SecTypeSHLib-10]
	_ = x[SecTypeDynSym-11]
	_ = x[SecTypeInitArray-14]
	_ = x[SecTypeFiniArray-15]
	_ = x[SecTypePreinitArray-16]
	_ = x[SecTypeGroup-17]
	_ = x[SecTypeSymTab_SHNDX-18]
	_ = x[SecTypeOSLo-1610612736]
	_ = x[SecTypeGNUAttributs-1879048181]
	_ = x[SecTypeGNUHash-1879048182]
	_ = x[SecTypeGNULibList-1879048183]
	_ = x[SecTypeGNUVerDef-1879048189]
	_ = x[SecTypeGNUVerNeed-1879048190]
	_ = x[SecTypeGNUVerSym-1879048191]
	_ = x[SecTypeOSHi-1879048191]
	_ = x[SecTypeProcLo-1879048192]
	_ = x[SecTypeMIPS_ABIFlags-1879048234]
	_ = x[SecTypeProcHi-2147483647]
	_ = x[SecTypeUserLo-2147483648]
	_ = x[SecTypeUserHi-4294967295]
}

const (
	_SectionType_name_0 = "inactiveprogram defined informationsymbol table sectionstring table sectionrelocation section with addendssymbol hash table sectiondynamic sectionnote sectionno space sectionrelocation section - no addendsreserved - purpose unknowndynamic symbol table section"
	_SectionType_name_1 = "Initialization function pointersTermination function pointersPre-initialization function ptrsSection groupSection indexes (see SHN_XINDEX)"
	_SectionType_name_2 = "First of OS specific semantics"
	_SectionType_name_3 = "GNU object attributesGNU hash tableGNU prelink library list"
	_SectionType_name_4 = "GNU version definition sectionGNU version needs sectionGNU version symbol tablereserved range for processor"
	_SectionType_name_5 = ".MIPS.abiflags"
	_SectionType_name_6 = "specific section header typesreserved range for application"
	_SectionType_name_7 = "specific indexes"
)

var (
	_SectionType_index_0 = [...]uint16{0, 8, 35, 55, 75, 106, 131, 146, 158, 174, 205, 231, 259}
	_SectionType_index_1 = [...]uint8{0, 32, 61, 93, 106, 138}
	_SectionType_index_3 = [...]uint8{0, 21, 35, 59}
	_SectionType_index_4 = [...]uint8{0, 30, 55, 79, 107}
	_SectionType_index_6 = [...]uint8{0, 29, 59}
)

func (i SectionType) String() string {
	switch {
	case i <= 11:
		return _SectionType_name_0[_SectionType_index_0[i]:_SectionType_index_0[i+1]]
	case 14 <= i && i <= 18:
		i -= 14
		return _SectionType_name_1[_SectionType_index_1[i]:_SectionType_index_1[i+1]]
	case i == 1610612736:
		return _SectionType_name_2
	case 1879048181 <= i && i <= 1879048183:
		i -= 1879048181
		return _SectionType_name_3[_SectionType_index_3[i]:_SectionType_index_3[i+1]]
	case 1879048189 <= i && i <= 1879048192:
		i -= 1879048189
		return _SectionType_name_4[_SectionType_index_4[i]:_SectionType_index_4[i+1]]
	case i == 1879048234:
		return _SectionType_name_5
	case 2147483647 <= i && i <= 2147483648:
		i -= 2147483647
		return _SectionType_name_6[_SectionType_index_6[i]:_SectionType_index_6[i+1]]
	case i == 4294967295:
		return _SectionType_name_7
	default:
		return "SectionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DataNone-0]
	_ = x[Data2LSB-1]
	_ = x[Data2MSB-2]
}

const _Data_name = "unknown data format2's complement little-endian2's complement big-endian"

var _Data_index = [...]uint8{0, 19, 47, 72}

func (i Data) String() string {
	if i >= Data(len(_Data_index)-1) {
		return "Data(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Data_name[_Data_index[i]:_Data_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OSABINone-0]
	_ = x[OSABIHPUX-1]
	_ = x[OSABINetBSD-2]
	_ = x[OSABILinux-3]
	_ = x[OSABIHurd-4]
	_ = x[OSABI86Open-5]
	_ = x[OSABISolaris-6]
	_ = x[OSABIAIX-7]
	_ = x[OSABIIRIX-8]
	_ = x[OSABIFreeBSD-9]
	_ = x[OSABITRU64-10]
	_ = x[OSABIModesto-11]
	_ = x[OSABIOpenBSD-12]
	_ = x[OSABIOpenVMS-13]
	_ = x[OSABINSK-14]
	_ = x[OSABIAROS-15]
	_ = x[OSABIFenixOS-16]
	_ = x[OSABICloudBI-17]
	_ = x[OSABIARM-97]
	_ = x[OSABIStandalone-255]
}

const (
	_OSABI_name_0 = "UNIX System V ABIHP-UX operating systemNetBSDLinuxHurd86Open common IA32 ABISolarisAIXIRIXFreeBSDTRU64 UNIXNovell ModestoOpenBSDOpen VMSHP Non-Stop KernelAmiga Research OSThe FenixOS highly scalable multi-core OSNuxi CloudABI"
	_OSABI_name_1 = "ARM"
	_OSABI_name_2 = "Standalone (embedded) application"
)

var (
	_OSABI_index_0 = [...]uint8{0, 17, 39, 45, 50, 54, 76, 83, 86, 90, 97, 107, 121, 128, 136, 154, 171, 212, 225}
)

func (i OSABI) String() string {
	switch {
	case i <= 17:
		return _OSABI_name_0[_OSABI_index_0[i]:_OSABI_index_0[i+1]]
	case i == 97:
		return _OSABI_name_1
	case i == 255:
		return _OSABI_name_2
	default:
		return "OSABI(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TypeNone-0]
	_ = x[TypeRelocatable-1]
	_ = x[TypeExecutable-2]
	_ = x[TypeDynamic-3]
	_ = x[TypeCore-4]
	_ = x[TypeOSlo-65024]
	_ = x[TypeOShi-65279]
	_ = x[TypeProclo-65280]
	_ = x[TypeProchi-65535]
}

const (
	_Type_name_0 = "Unknown typeRelocatableExecutableShared objectCore file"
	_Type_name_1 = "First operating system specific"
	_Type_name_2 = "Last operating system-specificFirst processor-specific"
	_Type_name_3 = "Last processor-specific"
)

var (
	_Type_index_0 = [...]uint8{0, 12, 23, 33, 46, 55}
	_Type_index_2 = [...]uint8{0, 30, 54}
)

func (i Type) String() string {
	switch {
	case i <= 4:
		return _Type_name_0[_Type_index_0[i]:_Type_index_0[i+1]]
	case i == 65024:
		return _Type_name_1
	case 65279 <= i && i <= 65280:
		i -= 65279
		return _Type_name_2[_Type_index_2[i]:_Type_index_2[i+1]]
	case i == 65535:
		return _Type_name_3
	default:
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MachineNone-0]
	_ = x[MachineM32-1]
	_ = x[MachineSPARC-2]
	_ = x[Machine386-3]
	_ = x[Machine68K-4]
	_ = x[Machine88K-5]
	_ = x[Machine860-7]
	_ = x[MachineMIPS-8]
	_ = x[MachineS370-9]
	_ = x[MachineMIPS_RS3_LE-10]
	_ = x[MachinePARISC-15]
	_ = x[MachineVPP500-17]
	_ = x[MachineSPARC32plus-18]
	_ = x[Machine960-19]
	_ = x[MachinePPC-20]
	_ = x[MachinePPC64-21]
	_ = x[MachineS390-22]
	_ = x[MachineV800-36]
	_ = x[MachineFR20-37]
	_ = x[MachineRH32-38]
	_ = x[MachineRCE-39]
	_ = x[MachineARM-40]
	_ = x[MachineSH-42]
	_ = x[MachineSPARCV9-43]
	_ = x[MachineTriCore-44]
	_ = x[MachineARC-45]
	_ = x[MachineH8_300-46]
	_ = x[MachineH8_300H-47]
	_ = x[MachineH8S-48]
	_ = x[MachineH8_500-49]
	_ = x[MachineIA_64-50]
	_ = x[MachineMIPS_X-51]
	_ = x[MachineColdFire-52]
	_ = x[Machine68HC12-53]
	_ = x[MachineMMA-54]
	_ = x[MachinePCP-55]
	_ = x[MachineNCPU-56]
	_ = x[MachineNDR1-57]
	_ = x[MachineStarCore-58]
	_ = x[MachineME16-59]
	_ = x[MachineST100-60]
	_ = x[MachineTinyJ-61]
	_ = x[MachineX86_64-62]
	_ = x[MachinePDSP-63]
	_ = x[MachinePDP10-64]
	_ = x[MachinePDP11-65]
	_ = x[MachineFX66-66]
	_ = x[MachineST9PLUS-67]
	_ = x[MachineST7-68]
	_ = x[Machine68HC16-69]
	_ = x[Machine68HC11-70]
	_ = x[Machine68HC08-71]
	_ = x[Machine68HC05-72]
	_ = x[MachineSVX-73]
	_ = x[MachineST19-74]
	_ = x[MachineVAX-75]
	_ = x[MachineCRIS-76]
	_ = x[MachineJavelin-77]
	_ = x[MachineFirepath-78]
	_ = x[MachineZSP-79]
	_ = x[MachineMMIX-80]
	_ = x[MachineHUANY-81]
	_ = x[MachinePrism-82]
	_ = x[MachineAVR-83]
	_ = x[MachineFR30-84]
	_ = x[MachineD10V-85]
	_ = x[MachineD30V-86]
	_ = x[MachineV850-87]
	_ = x[MachineM32R-88]
	_ = x[MachineMN10300-89]
	_ = x[MachineMN10200-90]
	_ = x[MachinePJ-91]
	_ = x[MachineOPENRISC-92]
	_ = x[MachineARC_Compact-93]
	_ = x[MachineXtensa-94]
	_ = x[MachineVideoCore-95]
	_ = x[MachineTMM_GPP-96]
	_ = x[MachineNS32K-97]
	_ = x[MachineTPC-98]
	_ = x[MachineSNP1K-99]
	_ = x[MachineST200-100]
	_ = x[MachineIP2K-101]
	_ = x[MachineMAX-102]
	_ = x[MachineCR-103]
	_ = x[MachineF2MC16-104]
	_ = x[MachineMSP430-105]
	_ = x[MachineBlackfin-106]
	_ = x[MachineSE_C33-107]
	_ = x[MachineSEP-108]
	_ = x[MachineArca-109]
	_ = x[MachineUNICORE-110]
	_ = x[MachineEXcess-111]
	_ = x[MachineDXP-112]
	_ = x[MachineAlteraNios2-113]
	_ = x[MachineCRX-114]
	_ = x[MachineXGATE-115]
	_ = x[MachineC166-116]
	_ = x[MachineM16C-117]
	_ = x[MachineDSPIC30F-118]
	_ = x[MachineCE-119]
	_ = x[MachineM32C-120]
	_ = x[MachineTSK3000-131]
	_ = x[MachineRS08-132]
	_ = x[MachineSHARC-133]
	_ = x[MachineECOG2-134]
	_ = x[MachineSCORE7-135]
	_ = x[MachineDSP24-136]
	_ = x[MachineVideoCore3-137]
	_ = x[MachineLATTICEMICO32-138]
	_ = x[MachineSE_C17-139]
	_ = x[MachineTI_C6000-140]
	_ = x[MachineTI_C2000-141]
	_ = x[MachineTI_C5500-142]
	_ = x[MachineTI_ARP32-143]
	_ = x[MachineTI_PRU-144]
	_ = x[MachineMMDSPPlus-160]
	_ = x[MachineCypressM8C-161]
	_ = x[MachineR32C-162]
	_ = x[MachineTriMedia-163]
	_ = x[MachineQDSP6-164]
	_ = x[Machine8051-165]
	_ = x[MachineSTXP7X-166]
	_ = x[MachineNDS32-167]
	_ = x[MachineECOG1-168]
	_ = x[MachineECOG1X-168]
	_ = x[MachineMAXQ30-169]
	_ = x[MachineXIMO16-170]
	_ = x[MachineMANIK-171]
	_ = x[MachineCrayNV2-172]
	_ = x[MachineRX-173]
	_ = x[MachineMETAG-174]
	_ = x[MachineMCSTElbrus-175]
	_ = x[MachineECOG16-176]
	_ = x[MachineCR16-177]
	_ = x[MachineETPU-178]
	_ = x[MachineSLE9X-179]
	_ = x[MachineL10M-180]
	_ = x[MachineK10M-181]
	_ = x[MachineAARCH64-183]
	_ = x[MachineAVR32-185]
	_ = x[MachineSTM8-186]
	_ = x[MachineTILE64-187]
	_ = x[MachineTILEPro-188]
	_ = x[MachineMicroBlaze-189]
	_ = x[MachineCUDA-190]
	_ = x[MachineTILEGx-191]
	_ = x[MachineCloudShield-192]
	_ = x[MachineCOREA_1ST-193]
	_ = x[MachineCOREA_2ND-194]
	_ = x[MachineARC_COMPACT2-195]
	_ = x[MachineOpen8-196]
	_ = x[MachineRL78-197]
	_ = x[MachineVideoCore5-198]
	_ = x[Machine78KOR-199]
	_ = x[Machine56800EX-200]
	_ = x[MachineBA1-201]
	_ = x[MachineBA2-202]
	_ = x[MachineXCORE-203]
	_ = x[MachineMCHP_PIC-204]
	_ = x[MachineIntel205-205]
	_ = x[MachineIntel206-206]
	_ = x[MachineIntel207-207]
	_ = x[MachineIntel208-208]
	_ = x[MachineIntel209-209]
	_ = x[MachineKM32-210]
	_ = x[MachineKMX32-211]
	_ = x[MachineKMX16-212]
	_ = x[MachineKMX8-213]
	_ = x[MachineKVARC-214]
	_ = x[MachineCDP-215]
	_ = x[MachineCOGE-216]
	_ = x[MachineCool-217]
	_ = x[MachineNORC-218]
	_ = x[MachineCSR_KALIMBA-219]
	_ = x[MachineZ80-220]
	_ = x[MachineVISIUM-221]
	_ = x[MachineFT32-222]
	_ = x[MachineMoxie-223]
	_ = x[MachineAMDGPU-224]
	_ = x[MachineRISCV-243]
	_ = x[MachineLanai-244]
	_ = x[MachineBPF-247]
	_ = x[MachineLoongArch-258]
	_ = x[Machine486-6]
	_ = x[MachineMIPS_RS4_BE-10]
	_ = x[MachineAlpha_STD-41]
	_ = x[MachineAlpha-36902]
}

const _Machine_name = "Unknown machineAT&T WE32100Sun SPARCIntel i386Motorola 68000Motorola 88000Intel i486Intel i860MIPS R3000 Big-Endian onlyIBM System/370MIPS R3000 Little-EndianHP PA-RISCFujitsu VPP500SPARC v8plusIntel 80960PowerPC 32-bitPowerPC 64-bitIBM System/390NEC V800Fujitsu FR20TRW RH-32Motorola RCEARMDigital Alpha (standard value)Hitachi SHSPARC v9 64-bitSiemens TriCore embedded processorArgonaut RISC CoreHitachi H8/300Hitachi H8/300HHitachi H8SHitachi H8/500Intel IA-64 ProcessorStanford MIPS-XMotorola ColdFireMotorola M68HC12Fujitsu MMASiemens PCPSony nCPUDenso NDR1 microprocessorMotorola Star*Core processorToyota ME16 processorSTMicroelectronics ST100 processorAdvanced Logic Corp. TinyJ processorAdvanced Micro Devices x86-64Sony DSP ProcessorDigital Equipment Corp. PDP-10Digital Equipment Corp. PDP-11Siemens FX66 microcontrollerSTMicroelectronics ST9+ 8/16 bit microcontrollerSTMicroelectronics ST7 8-bit microcontrollerMotorola MC68HC16 MicrocontrollerMotorola MC68HC11 MicrocontrollerMotorola MC68HC08 MicrocontrollerMotorola MC68HC05 MicrocontrollerSilicon Graphics SVxSTMicroelectronics ST19 8-bit microcontrollerDigital VAXAxis Communications 32-bit embedded processorInfineon Technologies 32-bit embedded processorElement 14 64-bit DSP ProcessorLSI Logic 16-bit DSP ProcessorDonald Knuth's educational 64-bit processorHarvard University machine-independent object filesSiTera PrismAtmel AVR 8-bit microcontrollerFujitsu FR30Mitsubishi D10VMitsubishi D30VNEC v850Mitsubishi M32RMatsushita MN10300Matsushita MN10200picoJavaOpenRISC 32-bit embedded processorARC International ARCompact processor (old spelling/synonym: MachineARC_A5)Tensilica Xtensa ArchitectureAlphamosaic VideoCore processorThompson Multimedia General Purpose ProcessorNational Semiconductor 32000 seriesTenor Network TPC processorTrebia SNP 1000 processorSTMicroelectronics (www.st.com) ST200 microcontrollerUbicom IP2xxx microcontroller familyMAX ProcessorNational Semiconductor CompactRISC microprocessorFujitsu F2MC16Texas Instruments embedded microcontroller msp430Analog Devices Blackfin (DSP) processorS1C33 Family of Seiko Epson processorsSharp embedded microprocessorArca RISC MicroprocessorMicroprocessor series from PKU-Unity Ltd. and MPRC of Peking UniversityeXcess: 16/32/64-bit configurable embedded CPUIcera Semiconductor Inc. Deep Execution ProcessorAltera Nios II soft-core processorNational Semiconductor CompactRISC CRX microprocessorMotorola XGATE embedded processorInfineon C16x/XC16x processorRenesas M16C series microprocessorsMicrochip Technology dsPIC30F Digital Signal ControllerFreescale Communication Engine RISC coreRenesas M32C series microprocessorsAltium TSK3000 coreFreescale RS08 embedded processorAnalog Devices SHARC family of 32-bit DSP processorsCyan Technology eCOG2 microprocessorSunplus S+core7 RISC processorNew Japan Radio (NJR) 24-bit DSP ProcessorBroadcom VideoCore III processorRISC processor for Lattice FPGA architectureSeiko Epson C17 familyThe Texas Instruments TMS320C6000 DSP familyThe Texas Instruments TMS320C2000 DSP familyThe Texas Instruments TMS320C55x DSP familyTexas Instruments Application Specific RISC Processor, 32bit fetchTexas Instruments Programmable Realtime UnitSTMicroelectronics 64bit VLIW Data Signal ProcessorCypress M8C microprocessorRenesas R32C series microprocessorsNXP Semiconductors TriMedia architecture familyQUALCOMM DSP6 ProcessorIntel 8051 and variantsSTMicroelectronics STxP7x family of configurable and extensible RISC processorsAndes Technology compact code size embedded RISC processor familyCyan Technology eCOG1X familyDallas Semiconductor MAXQ30 Core Micro-controllersNew Japan Radio (NJR) 16-bit DSP ProcessorM2000 Reconfigurable RISC MicroprocessorCray Inc. NV2 vector architectureRenesas RX familyImagination Technologies META processor architectureMCST Elbrus general purpose hardware architectureCyan Technology eCOG16 familyNational Semiconductor CompactRISC CR16 16-bit microprocessorFreescale Extended Time Processing UnitInfineon Technologies SLE9X coreIntel L10MIntel K10MARM 64-bit Architecture (AArch64)Atmel Corporation 32-bit microprocessor familySTMicroeletronics STM8 8-bit microcontrollerTilera TILE64 multicore architecture familyTilera TILEPro multicore architecture familyXilinx MicroBlaze 32-bit RISC soft processor coreNVIDIA CUDA architectureTilera TILE-Gx multicore architecture familyCloudShield architecture familyKIPO-KAIST Core-A 1st generation processor familyKIPO-KAIST Core-A 2nd generation processor familySynopsys ARCompact V2Open8 8-bit RISC soft processor coreRenesas RL78 familyBroadcom VideoCore V processorRenesas 78KOR familyFreescale 56800EX Digital Signal Controller (DSC)Beyond BA1 CPU architectureBeyond BA2 CPU architectureXMOS xCORE processor familyMicrochip 8-bit PIC(r) familyReserved by IntelReserved by IntelReserved by IntelReserved by IntelReserved by IntelKM211 KM32 32-bit processorKM211 KMX32 32-bit processorKM211 KMX16 16-bit processorKM211 KMX8 8-bit processorKM211 KVARC processorPaneve CDP architecture familyCognitive Smart Memory ProcessorBluechip Systems CoolEngineNanoradio Optimized RISCCSR Kalimba architecture familyZilog Z80Controls and Data Services VISIUMcore processorFTDI Chip FT32 high performance 32-bit RISC architectureMoxie processor familyAMD GPU architectureRISC-VLanai 32-bit processorLinux BPF – in-kernel virtual machineLoongArchAlpha (written in the absence of an ABI)"

var _Machine_map = map[Machine]string{
	0:     _Machine_name[0:15],
	1:     _Machine_name[15:27],
	2:     _Machine_name[27:36],
	3:     _Machine_name[36:46],
	4:     _Machine_name[46:60],
	5:     _Machine_name[60:74],
	6:     _Machine_name[74:84],
	7:     _Machine_name[84:94],
	8:     _Machine_name[94:120],
	9:     _Machine_name[120:134],
	10:    _Machine_name[134:158],
	15:    _Machine_name[158:168],
	17:    _Machine_name[168:182],
	18:    _Machine_name[182:194],
	19:    _Machine_name[194:205],
	20:    _Machine_name[205:219],
	21:    _Machine_name[219:233],
	22:    _Machine_name[233:247],
	36:    _Machine_name[247:255],
	37:    _Machine_name[255:267],
	38:    _Machine_name[267:276],
	39:    _Machine_name[276:288],
	40:    _Machine_name[288:291],
	41:    _Machine_name[291:321],
	42:    _Machine_name[321:331],
	43:    _Machine_name[331:346],
	44:    _Machine_name[346:380],
	45:    _Machine_name[380:398],
	46:    _Machine_name[398:412],
	47:    _Machine_name[412:427],
	48:    _Machine_name[427:438],
	49:    _Machine_name[438:452],
	50:    _Machine_name[452:473],
	51:    _Machine_name[473:488],
	52:    _Machine_name[488:505],
	53:    _Machine_name[505:521],
	54:    _Machine_name[521:532],
	55:    _Machine_name[532:543],
	56:    _Machine_name[543:552],
	57:    _Machine_name[552:577],
	58:    _Machine_name[577:605],
	59:    _Machine_name[605:626],
	60:    _Machine_name[626:660],
	61:    _Machine_name[660:696],
	62:    _Machine_name[696:725],
	63:    _Machine_name[725:743],
	64:    _Machine_name[743:773],
	65:    _Machine_name[773:803],
	66:    _Machine_name[803:831],
	67:    _Machine_name[831:879],
	68:    _Machine_name[879:923],
	69:    _Machine_name[923:956],
	70:    _Machine_name[956:989],
	71:    _Machine_name[989:1022],
	72:    _Machine_name[1022:1055],
	73:    _Machine_name[1055:1075],
	74:    _Machine_name[1075:1120],
	75:    _Machine_name[1120:1131],
	76:    _Machine_name[1131:1176],
	77:    _Machine_name[1176:1223],
	78:    _Machine_name[1223:1254],
	79:    _Machine_name[1254:1284],
	80:    _Machine_name[1284:1327],
	81:    _Machine_name[1327:1378],
	82:    _Machine_name[1378:1390],
	83:    _Machine_name[1390:1421],
	84:    _Machine_name[1421:1433],
	85:    _Machine_name[1433:1448],
	86:    _Machine_name[1448:1463],
	87:    _Machine_name[1463:1471],
	88:    _Machine_name[1471:1486],
	89:    _Machine_name[1486:1504],
	90:    _Machine_name[1504:1522],
	91:    _Machine_name[1522:1530],
	92:    _Machine_name[1530:1564],
	93:    _Machine_name[1564:1639],
	94:    _Machine_name[1639:1668],
	95:    _Machine_name[1668:1699],
	96:    _Machine_name[1699:1744],
	97:    _Machine_name[1744:1779],
	98:    _Machine_name[1779:1806],
	99:    _Machine_name[1806:1831],
	100:   _Machine_name[1831:1884],
	101:   _Machine_name[1884:1920],
	102:   _Machine_name[1920:1933],
	103:   _Machine_name[1933:1982],
	104:   _Machine_name[1982:1996],
	105:   _Machine_name[1996:2045],
	106:   _Machine_name[2045:2084],
	107:   _Machine_name[2084:2122],
	108:   _Machine_name[2122:2151],
	109:   _Machine_name[2151:2175],
	110:   _Machine_name[2175:2246],
	111:   _Machine_name[2246:2292],
	112:   _Machine_name[2292:2341],
	113:   _Machine_name[2341:2375],
	114:   _Machine_name[2375:2428],
	115:   _Machine_name[2428:2461],
	116:   _Machine_name[2461:2490],
	117:   _Machine_name[2490:2525],
	118:   _Machine_name[2525:2580],
	119:   _Machine_name[2580:2620],
	120:   _Machine_name[2620:2655],
	131:   _Machine_name[2655:2674],
	132:   _Machine_name[2674:2707],
	133:   _Machine_name[2707:2759],
	134:   _Machine_name[2759:2795],
	135:   _Machine_name[2795:2825],
	136:   _Machine_name[2825:2867],
	137:   _Machine_name[2867:2899],
	138:   _Machine_name[2899:2943],
	139:   _Machine_name[2943:2965],
	140:   _Machine_name[2965:3009],
	141:   _Machine_name[3009:3053],
	142:   _Machine_name[3053:3096],
	143:   _Machine_name[3096:3162],
	144:   _Machine_name[3162:3206],
	160:   _Machine_name[3206:3257],
	161:   _Machine_name[3257:3283],
	162:   _Machine_name[3283:3318],
	163:   _Machine_name[3318:3365],
	164:   _Machine_name[3365:3388],
	165:   _Machine_name[3388:3411],
	166:   _Machine_name[3411:3490],
	167:   _Machine_name[3490:3555],
	168:   _Machine_name[3555:3584],
	169:   _Machine_name[3584:3634],
	170:   _Machine_name[3634:3676],
	171:   _Machine_name[3676:3716],
	172:   _Machine_name[3716:3749],
	173:   _Machine_name[3749:3766],
	174:   _Machine_name[3766:3818],
	175:   _Machine_name[3818:3867],
	176:   _Machine_name[3867:3896],
	177:   _Machine_name[3896:3957],
	178:   _Machine_name[3957:3996],
	179:   _Machine_name[3996:4028],
	180:   _Machine_name[4028:4038],
	181:   _Machine_name[4038:4048],
	183:   _Machine_name[4048:4081],
	185:   _Machine_name[4081:4127],
	186:   _Machine_name[4127:4171],
	187:   _Machine_name[4171:4214],
	188:   _Machine_name[4214:4258],
	189:   _Machine_name[4258:4307],
	190:   _Machine_name[4307:4331],
	191:   _Machine_name[4331:4375],
	192:   _Machine_name[4375:4406],
	193:   _Machine_name[4406:4455],
	194:   _Machine_name[4455:4504],
	195:   _Machine_name[4504:4525],
	196:   _Machine_name[4525:4561],
	197:   _Machine_name[4561:4580],
	198:   _Machine_name[4580:4610],
	199:   _Machine_name[4610:4630],
	200:   _Machine_name[4630:4679],
	201:   _Machine_name[4679:4706],
	202:   _Machine_name[4706:4733],
	203:   _Machine_name[4733:4760],
	204:   _Machine_name[4760:4789],
	205:   _Machine_name[4789:4806],
	206:   _Machine_name[4806:4823],
	207:   _Machine_name[4823:4840],
	208:   _Machine_name[4840:4857],
	209:   _Machine_name[4857:4874],
	210:   _Machine_name[4874:4901],
	211:   _Machine_name[4901:4929],
	212:   _Machine_name[4929:4957],
	213:   _Machine_name[4957:4983],
	214:   _Machine_name[4983:5004],
	215:   _Machine_name[5004:5034],
	216:   _Machine_name[5034:5066],
	217:   _Machine_name[5066:5093],
	218:   _Machine_name[5093:5117],
	219:   _Machine_name[5117:5148],
	220:   _Machine_name[5148:5157],
	221:   _Machine_name[5157:5204],
	222:   _Machine_name[5204:5260],
	223:   _Machine_name[5260:5282],
	224:   _Machine_name[5282:5302],
	243:   _Machine_name[5302:5308],
	244:   _Machine_name[5308:5330],
	247:   _Machine_name[5330:5369],
	258:   _Machine_name[5369:5378],
	36902: _Machine_name[5378:5418],
}

func (i Machine) String() string {
	if str, ok := _Machine_map[i]; ok {
		return str
	}
	return "Machine(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SecIdxUndef-0]
	_ = x[SecIdxReserveLo-65280]
	_ = x[SecIdxProcLo-65280]
	_ = x[SecIdxProcHi-65311]
	_ = x[SecIdxOSLo-65312]
	_ = x[SecIdxOSHi-65343]
	_ = x[SecIdxAbs-65521]
	_ = x[SecIdxCommon-65522]
	_ = x[SecIdxXindex-65535]
	_ = x[SecIdxReserveHi-65535]
}

const (
	_SectionIndex_name_0 = "Undefined, missing, irrelevant"
	_SectionIndex_name_1 = "First of reserved range"
	_SectionIndex_name_2 = "Last processor-specificFirst operating system-specific"
	_SectionIndex_name_3 = "Last operating system-specific"
	_SectionIndex_name_4 = "Absolute valuesCommon data"
	_SectionIndex_name_5 = "Escape; index stored elsewhere"
)

var (
	_SectionIndex_index_2 = [...]uint8{0, 23, 54}
	_SectionIndex_index_4 = [...]uint8{0, 15, 26}
)

func (i SectionIndex) String() string {
	switch {
	case i == 0:
		return _SectionIndex_name_0
	case i == 65280:
		return _SectionIndex_name_1
	case 65311 <= i && i <= 65312:
		i -= 65311
		return _SectionIndex_name_2[_SectionIndex_index_2[i]:_SectionIndex_index_2[i+1]]
	case i == 65343:
		return _SectionIndex_name_3
	case 65521 <= i && i <= 65522:
		i -= 65521
		return _SectionIndex_name_4[_SectionIndex_index_4[i]:_SectionIndex_index_4[i+1]]
	case i == 65535:
		return _SectionIndex_name_5
	default:
		return "SectionIndex(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ProgTypeNull-0]
	_ = x[ProgTypeLoad-1]
	_ = x[ProgTypeDynamic-2]
	_ = x[ProgTypeInterp-3]
	_ = x[ProgTypeNote-4]
	_ = x[ProgTypeSHLib-5]
	_ = x[ProgTypePHDR-6]
	_ = x[ProgTypeTLS-7]
	_ = x[ProgTypeOSLo-1610612736]
	_ = x[ProgTypeGNU_EH_Frame-1685382480]
	_ = x[ProgTypeGNU_Stack-1685382481]
	_ = x[ProgTypeGNU_RELRO-1685382482]
	_ = x[ProgTypeGNU_Property-1685382483]
	_ = x[ProgTypeGNU_MBIND_Lo-1685382485]
	_ = x[ProgTypeGNU_MBIND_Hi-1685386580]
	_ = x[ProgTypePAXFlags-1694766464]
	_ = x[ProgTypeOpenBSDRandomize-1705237478]
	_ = x[ProgTypeOpenBSDWXNeeded-1705237479]
	_ = x[ProgTypeOpenBSDNoBTCFI-1705237480]
	_ = x[ProgTypeOpenBSDBootData-1705253862]
	_ = x[ProgTypeSUNW_EH_Frame-1685382480]
	_ = x[ProgTypeSUNWStack-1879048187]
	_ = x[ProgTypeOSHi-1879048191]
	_ = x[ProgTypeProcLo-1879048192]
	_ = x[ProgTypeARM_ARCHExt-1879048192]
	_ = x[ProgTypeARM_EXIdx-1879048193]
	_ = x[ProgTypeAARCH64_ARCHExt-1879048192]
	_ = x[ProgTypeAARCH64_Unwind-1879048193]
	_ = x[ProgTypeMIPS_REGInfo-1879048192]
	_ = x[ProgTypeMIPS_RTProc-1879048193]
	_ = x[ProgTypeMIPS_Options-1879048194]
	_ = x[ProgTypeMIPS_ABIFlags-1879048195]
	_ = x[ProgTypeS390_PGSTE-1879048192]
	_ = x[ProgTypeProcHi-2147483647]
}

const _ProgType_name = "Unused entryLoadable segmentDynamic linking information segmentPathname of interpreterAuxiliary informationReserved (not used)Location of program header itselfThread local storage segmentFirst OS-specificFrame unwind informationStack flagsRead only after relocsGNU propertyMbind segments startMbind segments finishPAX flagsRandom dataW^X violationsNo branch target CFIBoot argumentsStack segmentLast OS-specificFirst processor-specific typeException unwind tablesOptionsABI flagsLast processor-specific type"

var _ProgType_map = map[ProgType]string{
	0:          _ProgType_name[0:12],
	1:          _ProgType_name[12:28],
	2:          _ProgType_name[28:63],
	3:          _ProgType_name[63:86],
	4:          _ProgType_name[86:107],
	5:          _ProgType_name[107:126],
	6:          _ProgType_name[126:159],
	7:          _ProgType_name[159:187],
	1610612736: _ProgType_name[187:204],
	1685382480: _ProgType_name[204:228],
	1685382481: _ProgType_name[228:239],
	1685382482: _ProgType_name[239:261],
	1685382483: _ProgType_name[261:273],
	1685382485: _ProgType_name[273:293],
	1685386580: _ProgType_name[293:314],
	1694766464: _ProgType_name[314:323],
	1705237478: _ProgType_name[323:334],
	1705237479: _ProgType_name[334:348],
	1705237480: _ProgType_name[348:368],
	1705253862: _ProgType_name[368:382],
	1879048187: _ProgType_name[382:395],
	1879048191: _ProgType_name[395:411],
	1879048192: _ProgType_name[411:440],
	1879048193: _ProgType_name[440:463],
	1879048194: _ProgType_name[463:470],
	1879048195: _ProgType_name[470:479],
	2147483647: _ProgType_name[479:507],
}

func (i ProgType) String() string {
	if str, ok := _ProgType_map[i]; ok {
		return str
	}
	return "ProgType(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[secFlagWrite-1]
	_ = x[secFlagAlloc-2]
	_ = x[secFlagExecInstr-4]
	_ = x[secFlagMerge-16]
	_ = x[secFlagStrings-32]
	_ = x[secFlagInfoLink-64]
	_ = x[secFlagLinkOrder-128]
	_ = x[secFlagOSNonConforming-256]
	_ = x[secFlagGroup-512]
	_ = x[secFlagTLS-1024]
	_ = x[secFlagCompressed-2048]
	_ = x[secFlagMaskOS-267386880]
	_ = x[secFlagMaskProc-4026531840]
}

const _sectionFlag_name = "Section contains writable dataSection occupies memorySection contains instructionsSection may be mergedSection contains stringssh_info holds section indexSpecial ordering requirementsOS-specific processing requiredMember of section groupSection contains TLS dataSection is compressedOS-specific semanticsProcessor-specific semantics"

var _sectionFlag_map = map[sectionFlag]string{
	1:          _sectionFlag_name[0:30],
	2:          _sectionFlag_name[30:53],
	4:          _sectionFlag_name[53:82],
	16:         _sectionFlag_name[82:103],
	32:         _sectionFlag_name[103:127],
	64:         _sectionFlag_name[127:154],
	128:        _sectionFlag_name[154:183],
	256:        _sectionFlag_name[183:214],
	512:        _sectionFlag_name[214:237],
	1024:       _sectionFlag_name[237:262],
	2048:       _sectionFlag_name[262:283],
	267386880:  _sectionFlag_name[283:304],
	4026531840: _sectionFlag_name[304:332],
}

func (i sectionFlag) String() string {
	if str, ok := _sectionFlag_map[i]; ok {
		return str
	}
	return "sectionFlag(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[progFlagX-1]
	_ = x[progFlagW-2]
	_ = x[progFlagR-4]
	_ = x[progFlagMASKOS-267386880]
	_ = x[progFlagMASKPROC-4026531840]
}

const (
	_progFlag_name_0 = "ExecutableWritable"
	_progFlag_name_1 = "Readable"
	_progFlag_name_2 = "Operating system-specific"
	_progFlag_name_3 = "Processor-specific"
)

var (
	_progFlag_index_0 = [...]uint8{0, 10, 18}
)

func (i progFlag) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _progFlag_name_0[_progFlag_index_0[i]:_progFlag_index_0[i+1]]
	case i == 4:
		return _progFlag_name_1
	case i == 267386880:
		return _progFlag_name_2
	case i == 4026531840:
		return _progFlag_name_3
	default:
		return "progFlag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NTypeProcStatus-1]
	_ = x[NTypeFPRegSet-2]
	_ = x[NTypeProcPSInfo-3]
}

const _NType_name = "Process statusFloating point registersProcess state info"

var _NType_index = [...]uint8{0, 14, 38, 56}

func (i NType) String() string {
	i -= 1
	if i < 0 || i >= NType(len(_NType_index)-1) {
		return "NType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _NType_name[_NType_index[i]:_NType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SymVisDefault-0]
	_ = x[SymVisInternal-1]
	_ = x[SymVisHidden-2]
	_ = x[SymVisProtected-3]
}

const _SymVis_name = "Default visibility (see binding)Internal: Special meaning in relocatable objectsHidden: Not visibleProtected: visible but not preemptible"

var _SymVis_index = [...]uint8{0, 32, 80, 99, 137}

func (i SymVis) String() string {
	if i < 0 || i >= SymVis(len(_SymVis_index)-1) {
		return "SymVis(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SymVis_name[_SymVis_index[i]:_SymVis_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SymBindLocal-0]
	_ = x[SymBindGlobal-1]
	_ = x[SymBindWeak-2]
	_ = x[SymBindOSLo-10]
	_ = x[SymBindOSHi-12]
	_ = x[SymBindProcLo-13]
	_ = x[SymBindProcHi-15]
}

const (
	_SymBind_name_0 = "Local symbolGlobal symbollike global - lower precedence"
	_SymBind_name_1 = "Reserved range for operating system"
	_SymBind_name_2 = "specific semanticsreserved range for processor"
	_SymBind_name_3 = "specific semantics"
)

var (
	_SymBind_index_0 = [...]uint8{0, 12, 25, 55}
	_SymBind_index_2 = [...]uint8{0, 18, 46}
)

func (i SymBind) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SymBind_name_0[_SymBind_index_0[i]:_SymBind_index_0[i+1]]
	case i == 10:
		return _SymBind_name_1
	case 12 <= i && i <= 13:
		i -= 12
		return _SymBind_name_2[_SymBind_index_2[i]:_SymBind_index_2[i+1]]
	case i == 15:
		return _SymBind_name_3
	default:
		return "SymBind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SymTypeNoType-0]
	_ = x[SymTypeObject-1]
	_ = x[SymTypeFunc-2]
	_ = x[SymTypeSection-3]
	_ = x[SymTypeFile-4]
	_ = x[SymTypeCommon-5]
	_ = x[SymTypeTLS-6]
	_ = x[SymTypeOSLo-10]
	_ = x[SymTypeOSHi-12]
	_ = x[SymTypeProcLo-13]
	_ = x[SymTypeProcHi-15]
	_ = x[SymTypeRelc-8]
	_ = x[SymTypeSRelc-9]
	_ = x[SymTypeGNU_IFunc-10]
}

const (
	_SymType_name_0 = "Unspecified typeData objectFunctionSectionSource fileUninitialized common blockTLS object"
	_SymType_name_1 = "Complex relocation expressionSigned complex relocation expressionrsv:OSLo"
	_SymType_name_2 = "rsv:OSHirsv:ProcLo"
	_SymType_name_3 = "rsv:ProcHi"
)

var (
	_SymType_index_0 = [...]uint8{0, 16, 27, 35, 42, 53, 79, 89}
	_SymType_index_1 = [...]uint8{0, 29, 65, 73}
	_SymType_index_2 = [...]uint8{0, 8, 18}
)

func (i SymType) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _SymType_name_0[_SymType_index_0[i]:_SymType_index_0[i+1]]
	case 8 <= i && i <= 10:
		i -= 8
		return _SymType_name_1[_SymType_index_1[i]:_SymType_index_1[i+1]]
	case 12 <= i && i <= 13:
		i -= 12
		return _SymType_name_2[_SymType_index_2[i]:_SymType_index_2[i+1]]
	case i == 15:
		return _SymType_name_3
	default:
		return "SymType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Rx86_64None-0]
	_ = x[Rx86_6464-1]
	_ = x[Rx86_64PC32-2]
	_ = x[Rx86_64GOT32-3]
	_ = x[Rx86_64PLT32-4]
	_ = x[Rx86_64Copy-5]
	_ = x[Rx86_64GLOB_Data-6]
	_ = x[Rx86_64JMP_Slot-7]
	_ = x[Rx86_64RELATIVE-8]
	_ = x[Rx86_64GOTPCREL-9]
	_ = x[Rx86_6432-10]
	_ = x[Rx86_6432S-11]
	_ = x[Rx86_6416-12]
	_ = x[Rx86_64PC16-13]
	_ = x[Rx86_648-14]
	_ = x[Rx86_64PC8-15]
	_ = x[Rx86_64DTPMOD64-16]
	_ = x[Rx86_64DTPOFF64-17]
	_ = x[Rx86_64TPOFF64-18]
	_ = x[Rx86_64TLSGD-19]
	_ = x[Rx86_64TLSLD-20]
	_ = x[Rx86_64DTPOFF32-21]
	_ = x[Rx86_64GOTTPOFF-22]
	_ = x[Rx86_64TPOFF32-23]
	_ = x[Rx86_64PC64-24]
	_ = x[Rx86_64GOTOFF64-25]
	_ = x[Rx86_64GOTPC32-26]
	_ = x[Rx86_64GOT64-27]
	_ = x[Rx86_64GOTPCREL64-28]
	_ = x[Rx86_64GOTPC64-29]
	_ = x[Rx86_64GOTPLT64-30]
	_ = x[Rx86_64PLTOFF64-31]
	_ = x[Rx86_64SIZE32-32]
	_ = x[Rx86_64SIZE64-33]
	_ = x[Rx86_64GOTPC32_TLSDESC-34]
	_ = x[Rx86_64TLSDESC_CALL-35]
	_ = x[Rx86_64TLSDESC-36]
	_ = x[Rx86_64IRELATIVE-37]
	_ = x[Rx86_64RELATIVE64-38]
	_ = x[Rx86_64PC32_BND-39]
	_ = x[Rx86_64PLT32_BND-40]
	_ = x[Rx86_64GOTPCRELX-41]
	_ = x[Rx86_64REX_GOTPCRELX-42]
}

const _RX86_64_name = "No relocationAdd 64 bit symbol valuePC-relative 32 bit signed sym valuePC-relative 32 bit GOT offsetPC-relative 32 bit PLT offsetCopy data from shared objectSet GOT entry to data addressSet GOT entry to code addressAdd load address of shared objectAdd 32 bit signed pcrel offset to GOTAdd 32 bit zero extended symbol valueAdd 32 bit sign extended symbol valueAdd 16 bit zero extended symbol valueAdd 16 bit signed extended pc relative symbol valueAdd 8 bit zero extended symbol valueAdd 8 bit signed extended pc relative symbol valueID of module containing symbolOffset in TLS blockOffset in static TLS blockPC relative offset to GD GOT entryPC relative offset to LD GOT entryOffset in TLS blockPC relative offset to IE GOT entryOffset in static TLS blockPC relative 64-bit sign extended symbol valueGOTOFF64GOTPC32GOT64GOTPCREL64GOTPC64GOTPLT64PLTOFF64SIZE32SIZE64GOTPC32_TLSDESCTLSDESC_CALLTLSDESCIRELATIVERELATIVE64PC32_BNDPLT32_BNDGOTPCRELXREX_GOTPCRELX"

var _RX86_64_index = [...]uint16{0, 13, 36, 71, 100, 129, 157, 186, 215, 248, 285, 322, 359, 396, 447, 483, 533, 563, 582, 608, 642, 676, 695, 729, 755, 800, 808, 815, 820, 830, 837, 845, 853, 859, 865, 880, 892, 899, 908, 918, 926, 935, 944, 957}

func (i RX86_64) String() string {
	if i < 0 || i >= RX86_64(len(_RX86_64_index)-1) {
		return "RX86_64(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RX86_64_name[_RX86_64_index[i]:_RX86_64_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RAArch64None-0]
	_ = x[RAArch64P32_ABS32-1]
	_ = x[RAArch64P32_ABS16-2]
	_ = x[RAArch64P32_PREL32-3]
	_ = x[RAArch64P32_PREL16-4]
	_ = x[RAArch64P32_MOVW_UABS_G0-5]
	_ = x[RAArch64P32_MOVW_UABS_G0_NC-6]
	_ = x[RAArch64P32_MOVW_UABS_G1-7]
	_ = x[RAArch64P32_MOVW_SABS_G0-8]
	_ = x[RAArch64P32_LD_PREL_LO19-9]
	_ = x[RAArch64P32_ADR_PREL_LO21-10]
	_ = x[RAArch64P32_ADR_PREL_PG_HI21-11]
	_ = x[RAArch64P32_ADD_ABS_LO12_NC-12]
	_ = x[RAArch64P32_LDST8_ABS_LO12_NC-13]
	_ = x[RAArch64P32_LDST16_ABS_LO12_NC-14]
	_ = x[RAArch64P32_LDST32_ABS_LO12_NC-15]
	_ = x[RAArch64P32_LDST64_ABS_LO12_NC-16]
	_ = x[RAArch64P32_LDST128_ABS_LO12_NC-17]
	_ = x[RAArch64P32_TSTBR14-18]
	_ = x[RAArch64P32_CONDBR19-19]
	_ = x[RAArch64P32_JUMP26-20]
	_ = x[RAArch64P32_CALL26-21]
	_ = x[RAArch64P32_GOT_LD_PREL19-25]
	_ = x[RAArch64P32_ADR_GOT_PAGE-26]
	_ = x[RAArch64P32_LD32_GOT_LO12_NC-27]
	_ = x[RAArch64P32_TLSGD_ADR_PAGE21-81]
	_ = x[RAArch64P32_TLSGD_ADD_LO12_NC-82]
	_ = x[RAArch64P32_TLSIE_ADR_GOTTPREL_PAGE21-103]
	_ = x[RAArch64P32_TLSIE_LD32_GOTTPREL_LO12_NC-104]
	_ = x[RAArch64P32_TLSIE_LD_GOTTPREL_PREL19-105]
	_ = x[RAArch64P32_TLSLE_MOVW_TPREL_G1-106]
	_ = x[RAArch64P32_TLSLE_MOVW_TPREL_G0-107]
	_ = x[RAArch64P32_TLSLE_MOVW_TPREL_G0_NC-108]
	_ = x[RAArch64P32_TLSLE_ADD_TPREL_HI12-109]
	_ = x[RAArch64P32_TLSLE_ADD_TPREL_LO12-110]
	_ = x[RAArch64P32_TLSLE_ADD_TPREL_LO12_NC-111]
	_ = x[RAArch64P32_TLSDESC_LD_PREL19-122]
	_ = x[RAArch64P32_TLSDESC_ADR_PREL21-123]
	_ = x[RAArch64P32_TLSDESC_ADR_PAGE21-124]
	_ = x[RAArch64P32_TLSDESC_LD32_LO12_NC-125]
	_ = x[RAArch64P32_TLSDESC_ADD_LO12_NC-126]
	_ = x[RAArch64P32_TLSDESC_CALL-127]
	_ = x[RAArch64P32_COPY-180]
	_ = x[RAArch64P32_GLOB_DAT-181]
	_ = x[RAArch64P32_JUMP_SLOT-182]
	_ = x[RAArch64P32_RELATIVE-183]
	_ = x[RAArch64P32_TLS_DTPMOD-184]
	_ = x[RAArch64P32_TLS_DTPREL-185]
	_ = x[RAArch64P32_TLS_TPREL-186]
	_ = x[RAArch64P32_TLSDESC-187]
	_ = x[RAArch64P32_IRELATIVE-188]
	_ = x[RAArch64NULL-256]
	_ = x[RAArch64ABS64-257]
	_ = x[RAArch64ABS32-258]
	_ = x[RAArch64ABS16-259]
	_ = x[RAArch64PREL64-260]
	_ = x[RAArch64PREL32-261]
	_ = x[RAArch64PREL16-262]
	_ = x[RAArch64MOVW_UABS_G0-263]
	_ = x[RAArch64MOVW_UABS_G0_NC-264]
	_ = x[RAArch64MOVW_UABS_G1-265]
	_ = x[RAArch64MOVW_UABS_G1_NC-266]
	_ = x[RAArch64MOVW_UABS_G2-267]
	_ = x[RAArch64MOVW_UABS_G2_NC-268]
	_ = x[RAArch64MOVW_UABS_G3-269]
	_ = x[RAArch64MOVW_SABS_G0-270]
	_ = x[RAArch64MOVW_SABS_G1-271]
	_ = x[RAArch64MOVW_SABS_G2-272]
	_ = x[RAArch64LD_PREL_LO19-273]
	_ = x[RAArch64ADR_PREL_LO21-274]
	_ = x[RAArch64ADR_PREL_PG_HI21-275]
	_ = x[RAArch64ADR_PREL_PG_HI21_NC-276]
	_ = x[RAArch64ADD_ABS_LO12_NC-277]
	_ = x[RAArch64LDST8_ABS_LO12_NC-278]
	_ = x[RAArch64TSTBR14-279]
	_ = x[RAArch64CONDBR19-280]
	_ = x[RAArch64JUMP26-282]
	_ = x[RAArch64CALL26-283]
	_ = x[RAArch64LDST16_ABS_LO12_NC-284]
	_ = x[RAArch64LDST32_ABS_LO12_NC-285]
	_ = x[RAArch64LDST64_ABS_LO12_NC-286]
	_ = x[RAArch64LDST128_ABS_LO12_NC-299]
	_ = x[RAArch64GOT_LD_PREL19-309]
	_ = x[RAArch64LD64_GOTOFF_LO15-310]
	_ = x[RAArch64ADR_GOT_PAGE-311]
	_ = x[RAArch64LD64_GOT_LO12_NC-312]
	_ = x[RAArch64LD64_GOTPAGE_LO15-313]
	_ = x[RAArch64TLSGD_ADR_PREL21-512]
	_ = x[RAArch64TLSGD_ADR_PAGE21-513]
	_ = x[RAArch64TLSGD_ADD_LO12_NC-514]
	_ = x[RAArch64TLSGD_MOVW_G1-515]
	_ = x[RAArch64TLSGD_MOVW_G0_NC-516]
	_ = x[RAArch64TLSLD_ADR_PREL21-517]
	_ = x[RAArch64TLSLD_ADR_PAGE21-518]
	_ = x[RAArch64TLSIE_MOVW_GOTTPREL_G1-539]
	_ = x[RAArch64TLSIE_MOVW_GOTTPREL_G0_NC-540]
	_ = x[RAArch64TLSIE_ADR_GOTTPREL_PAGE21-541]
	_ = x[RAArch64TLSIE_LD64_GOTTPREL_LO12_NC-542]
	_ = x[RAArch64TLSIE_LD_GOTTPREL_PREL19-543]
	_ = x[RAArch64TLSLE_MOVW_TPREL_G2-544]
	_ = x[RAArch64TLSLE_MOVW_TPREL_G1-545]
	_ = x[RAArch64TLSLE_MOVW_TPREL_G1_NC-546]
	_ = x[RAArch64TLSLE_MOVW_TPREL_G0-547]
	_ = x[RAArch64TLSLE_MOVW_TPREL_G0_NC-548]
	_ = x[RAArch64TLSLE_ADD_TPREL_HI12-549]
	_ = x[RAArch64TLSLE_ADD_TPREL_LO12-550]
	_ = x[RAArch64TLSLE_ADD_TPREL_LO12_NC-551]
	_ = x[RAArch64TLSDESC_LD_PREL19-560]
	_ = x[RAArch64TLSDESC_ADR_PREL21-561]
	_ = x[RAArch64TLSDESC_ADR_PAGE21-562]
	_ = x[RAArch64TLSDESC_LD64_LO12_NC-563]
	_ = x[RAArch64TLSDESC_ADD_LO12_NC-564]
	_ = x[RAArch64TLSDESC_OFF_G1-565]
	_ = x[RAArch64TLSDESC_OFF_G0_NC-566]
	_ = x[RAArch64TLSDESC_LDR-567]
	_ = x[RAArch64TLSDESC_ADD-568]
	_ = x[RAArch64TLSDESC_CALL-569]
	_ = x[RAArch64TLSLE_LDST128_TPREL_LO12-570]
	_ = x[RAArch64TLSLE_LDST128_TPREL_LO12_NC-571]
	_ = x[RAArch64TLSLD_LDST128_DTPREL_LO12-572]
	_ = x[RAArch64TLSLD_LDST128_DTPREL_LO12_NC-573]
	_ = x[RAArch64COPY-1024]
	_ = x[RAArch64GLOB_DAT-1025]
	_ = x[RAArch64JUMP_SLOT-1026]
	_ = x[RAArch64RELATIVE-1027]
	_ = x[RAArch64TLS_DTPMOD64-1028]
	_ = x[RAArch64TLS_DTPREL64-1029]
	_ = x[RAArch64TLS_TPREL64-1030]
	_ = x[RAArch64TLSDESC-1031]
	_ = x[RAArch64IRELATIVE-1032]
}

const _RAARCH64_name = "NoneP32_ABS32P32_ABS16P32_PREL32P32_PREL16P32_MOVW_UABS_G0P32_MOVW_UABS_G0_NCP32_MOVW_UABS_G1P32_MOVW_SABS_G0P32_LD_PREL_LO19P32_ADR_PREL_LO21P32_ADR_PREL_PG_HI21P32_ADD_ABS_LO12_NCP32_LDST8_ABS_LO12_NCP32_LDST16_ABS_LO12_NCP32_LDST32_ABS_LO12_NCP32_LDST64_ABS_LO12_NCP32_LDST128_ABS_LO12_NCP32_TSTBR14P32_CONDBR19P32_JUMP26P32_CALL26P32_GOT_LD_PREL19P32_ADR_GOT_PAGEP32_LD32_GOT_LO12_NCP32_TLSGD_ADR_PAGE21P32_TLSGD_ADD_LO12_NCP32_TLSIE_ADR_GOTTPREL_PAGE21P32_TLSIE_LD32_GOTTPREL_LO12_NCP32_TLSIE_LD_GOTTPREL_PREL19P32_TLSLE_MOVW_TPREL_G1P32_TLSLE_MOVW_TPREL_G0P32_TLSLE_MOVW_TPREL_G0_NCP32_TLSLE_ADD_TPREL_HI12P32_TLSLE_ADD_TPREL_LO12P32_TLSLE_ADD_TPREL_LO12_NCP32_TLSDESC_LD_PREL19P32_TLSDESC_ADR_PREL21P32_TLSDESC_ADR_PAGE21P32_TLSDESC_LD32_LO12_NCP32_TLSDESC_ADD_LO12_NCP32_TLSDESC_CALLP32_COPYP32_GLOB_DATP32_JUMP_SLOTP32_RELATIVEP32_TLS_DTPMODP32_TLS_DTPRELP32_TLS_TPRELP32_TLSDESCP32_IRELATIVENULLABS64ABS32ABS16PREL64PREL32PREL16MOVW_UABS_G0MOVW_UABS_G0_NCMOVW_UABS_G1MOVW_UABS_G1_NCMOVW_UABS_G2MOVW_UABS_G2_NCMOVW_UABS_G3MOVW_SABS_G0MOVW_SABS_G1MOVW_SABS_G2LD_PREL_LO19ADR_PREL_LO21ADR_PREL_PG_HI21ADR_PREL_PG_HI21_NCADD_ABS_LO12_NCLDST8_ABS_LO12_NCTSTBR14CONDBR19JUMP26CALL26LDST16_ABS_LO12_NCLDST32_ABS_LO12_NCLDST64_ABS_LO12_NCLDST128_ABS_LO12_NCGOT_LD_PREL19LD64_GOTOFF_LO15ADR_GOT_PAGELD64_GOT_LO12_NCLD64_GOTPAGE_LO15TLSGD_ADR_PREL21TLSGD_ADR_PAGE21TLSGD_ADD_LO12_NCTLSGD_MOVW_G1TLSGD_MOVW_G0_NCTLSLD_ADR_PREL21TLSLD_ADR_PAGE21TLSIE_MOVW_GOTTPREL_G1TLSIE_MOVW_GOTTPREL_G0_NCTLSIE_ADR_GOTTPREL_PAGE21TLSIE_LD64_GOTTPREL_LO12_NCTLSIE_LD_GOTTPREL_PREL19TLSLE_MOVW_TPREL_G2TLSLE_MOVW_TPREL_G1TLSLE_MOVW_TPREL_G1_NCTLSLE_MOVW_TPREL_G0TLSLE_MOVW_TPREL_G0_NCTLSLE_ADD_TPREL_HI12TLSLE_ADD_TPREL_LO12TLSLE_ADD_TPREL_LO12_NCTLSDESC_LD_PREL19TLSDESC_ADR_PREL21TLSDESC_ADR_PAGE21TLSDESC_LD64_LO12_NCTLSDESC_ADD_LO12_NCTLSDESC_OFF_G1TLSDESC_OFF_G0_NCTLSDESC_LDRTLSDESC_ADDTLSDESC_CALLTLSLE_LDST128_TPREL_LO12TLSLE_LDST128_TPREL_LO12_NCTLSLD_LDST128_DTPREL_LO12TLSLD_LDST128_DTPREL_LO12_NCCOPYGLOB_DATJUMP_SLOTRELATIVETLS_DTPMOD64TLS_DTPREL64TLS_TPREL64TLSDESCIRELATIVE"

var _RAARCH64_map = map[RAARCH64]string{
	0:    _RAARCH64_name[0:4],
	1:    _RAARCH64_name[4:13],
	2:    _RAARCH64_name[13:22],
	3:    _RAARCH64_name[22:32],
	4:    _RAARCH64_name[32:42],
	5:    _RAARCH64_name[42:58],
	6:    _RAARCH64_name[58:77],
	7:    _RAARCH64_name[77:93],
	8:    _RAARCH64_name[93:109],
	9:    _RAARCH64_name[109:125],
	10:   _RAARCH64_name[125:142],
	11:   _RAARCH64_name[142:162],
	12:   _RAARCH64_name[162:181],
	13:   _RAARCH64_name[181:202],
	14:   _RAARCH64_name[202:224],
	15:   _RAARCH64_name[224:246],
	16:   _RAARCH64_name[246:268],
	17:   _RAARCH64_name[268:291],
	18:   _RAARCH64_name[291:302],
	19:   _RAARCH64_name[302:314],
	20:   _RAARCH64_name[314:324],
	21:   _RAARCH64_name[324:334],
	25:   _RAARCH64_name[334:351],
	26:   _RAARCH64_name[351:367],
	27:   _RAARCH64_name[367:387],
	81:   _RAARCH64_name[387:407],
	82:   _RAARCH64_name[407:428],
	103:  _RAARCH64_name[428:457],
	104:  _RAARCH64_name[457:488],
	105:  _RAARCH64_name[488:516],
	106:  _RAARCH64_name[516:539],
	107:  _RAARCH64_name[539:562],
	108:  _RAARCH64_name[562:588],
	109:  _RAARCH64_name[588:612],
	110:  _RAARCH64_name[612:636],
	111:  _RAARCH64_name[636:663],
	122:  _RAARCH64_name[663:684],
	123:  _RAARCH64_name[684:706],
	124:  _RAARCH64_name[706:728],
	125:  _RAARCH64_name[728:752],
	126:  _RAARCH64_name[752:775],
	127:  _RAARCH64_name[775:791],
	180:  _RAARCH64_name[791:799],
	181:  _RAARCH64_name[799:811],
	182:  _RAARCH64_name[811:824],
	183:  _RAARCH64_name[824:836],
	184:  _RAARCH64_name[836:850],
	185:  _RAARCH64_name[850:864],
	186:  _RAARCH64_name[864:877],
	187:  _RAARCH64_name[877:888],
	188:  _RAARCH64_name[888:901],
	256:  _RAARCH64_name[901:905],
	257:  _RAARCH64_name[905:910],
	258:  _RAARCH64_name[910:915],
	259:  _RAARCH64_name[915:920],
	260:  _RAARCH64_name[920:926],
	261:  _RAARCH64_name[926:932],
	262:  _RAARCH64_name[932:938],
	263:  _RAARCH64_name[938:950],
	264:  _RAARCH64_name[950:965],
	265:  _RAARCH64_name[965:977],
	266:  _RAARCH64_name[977:992],
	267:  _RAARCH64_name[992:1004],
	268:  _RAARCH64_name[1004:1019],
	269:  _RAARCH64_name[1019:1031],
	270:  _RAARCH64_name[1031:1043],
	271:  _RAARCH64_name[1043:1055],
	272:  _RAARCH64_name[1055:1067],
	273:  _RAARCH64_name[1067:1079],
	274:  _RAARCH64_name[1079:1092],
	275:  _RAARCH64_name[1092:1108],
	276:  _RAARCH64_name[1108:1127],
	277:  _RAARCH64_name[1127:1142],
	278:  _RAARCH64_name[1142:1159],
	279:  _RAARCH64_name[1159:1166],
	280:  _RAARCH64_name[1166:1174],
	282:  _RAARCH64_name[1174:1180],
	283:  _RAARCH64_name[1180:1186],
	284:  _RAARCH64_name[1186:1204],
	285:  _RAARCH64_name[1204:1222],
	286:  _RAARCH64_name[1222:1240],
	299:  _RAARCH64_name[1240:1259],
	309:  _RAARCH64_name[1259:1272],
	310:  _RAARCH64_name[1272:1288],
	311:  _RAARCH64_name[1288:1300],
	312:  _RAARCH64_name[1300:1316],
	313:  _RAARCH64_name[1316:1333],
	512:  _RAARCH64_name[1333:1349],
	513:  _RAARCH64_name[1349:1365],
	514:  _RAARCH64_name[1365:1382],
	515:  _RAARCH64_name[1382:1395],
	516:  _RAARCH64_name[1395:1411],
	517:  _RAARCH64_name[1411:1427],
	518:  _RAARCH64_name[1427:1443],
	539:  _RAARCH64_name[1443:1465],
	540:  _RAARCH64_name[1465:1490],
	541:  _RAARCH64_name[1490:1515],
	542:  _RAARCH64_name[1515:1542],
	543:  _RAARCH64_name[1542:1566],
	544:  _RAARCH64_name[1566:1585],
	545:  _RAARCH64_name[1585:1604],
	546:  _RAARCH64_name[1604:1626],
	547:  _RAARCH64_name[1626:1645],
	548:  _RAARCH64_name[1645:1667],
	549:  _RAARCH64_name[1667:1687],
	550:  _RAARCH64_name[1687:1707],
	551:  _RAARCH64_name[1707:1730],
	560:  _RAARCH64_name[1730:1747],
	561:  _RAARCH64_name[1747:1765],
	562:  _RAARCH64_name[1765:1783],
	563:  _RAARCH64_name[1783:1803],
	564:  _RAARCH64_name[1803:1822],
	565:  _RAARCH64_name[1822:1836],
	566:  _RAARCH64_name[1836:1853],
	567:  _RAARCH64_name[1853:1864],
	568:  _RAARCH64_name[1864:1875],
	569:  _RAARCH64_name[1875:1887],
	570:  _RAARCH64_name[1887:1911],
	571:  _RAARCH64_name[1911:1938],
	572:  _RAARCH64_name[1938:1963],
	573:  _RAARCH64_name[1963:1991],
	1024: _RAARCH64_name[1991:1995],
	1025: _RAARCH64_name[1995:2003],
	1026: _RAARCH64_name[2003:2012],
	1027: _RAARCH64_name[2012:2020],
	1028: _RAARCH64_name[2020:2032],
	1029: _RAARCH64_name[2032:2044],
	1030: _RAARCH64_name[2044:2055],
	1031: _RAARCH64_name[2055:2062],
	1032: _RAARCH64_name[2062:2071],
}

func (i RAARCH64) String() string {
	if str, ok := _RAARCH64_map[i]; ok {
		return str
	}
	return "RAARCH64(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RAlphaNone-0]
	_ = x[RAlphaREFLONG-1]
	_ = x[RAlphaREFQUAD-2]
	_ = x[RAlphaGPREL32-3]
	_ = x[RAlphaLITERAL-4]
	_ = x[RAlphaLITUSE-5]
	_ = x[RAlphaGPDISP-6]
	_ = x[RAlphaBRADDR-7]
	_ = x[RAlphaHINT-8]
	_ = x[RAlphaSREL16-9]
	_ = x[RAlphaSREL32-10]
	_ = x[RAlphaSREL64-11]
	_ = x[RAlphaOP_PUSH-12]
	_ = x[RAlphaOP_STORE-13]
	_ = x[RAlphaOP_PSUB-14]
	_ = x[RAlphaOP_PRSHIFT-15]
	_ = x[RAlphaGPVALUE-16]
	_ = x[RAlphaGPRELHIGH-17]
	_ = x[RAlphaGPRELLOW-18]
	_ = x[RAlphaIMMED_GP_16-19]
	_ = x[RAlphaIMMED_GP_HI32-20]
	_ = x[RAlphaIMMED_SCN_HI32-21]
	_ = x[RAlphaIMMED_BR_HI32-22]
	_ = x[RAlphaIMMED_LO32-23]
	_ = x[RAlphaCOPY-24]
	_ = x[RAlphaGLOB_DAT-25]
	_ = x[RAlphaJMP_SLOT-26]
	_ = x[RAlphaRELATIVE-27]
}

const _RAlpha_name = "No relocationDirect 32 bitDirect 64 bitGP relative 32 bitGP relative 16 bit w/optimizationOptimization hint for LITERALAdd displacement to GPPC+4 relative 23 bit shiftedPC+4 relative 16 bit shiftedPC relative 16 bitPC relative 32 bitPC relative 64 bitOP stack pushOP stack pop and storeOP stack subtractOP stack right shiftGPVALUEGPRELHIGHGPRELLOWIMMED_GP_16IMMED_GP_HI32IMMED_SCN_HI32IMMED_BR_HI32IMMED_LO32Copy symbol at runtimeCreate GOT entryCreate PLT entryAdjust by program base"

var _RAlpha_index = [...]uint16{0, 13, 26, 39, 57, 90, 119, 141, 169, 197, 215, 233, 251, 264, 286, 303, 323, 330, 339, 347, 358, 371, 385, 398, 408, 430, 446, 462, 484}

func (i RAlpha) String() string {
	if i < 0 || i >= RAlpha(len(_RAlpha_index)-1) {
		return "RAlpha(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RAlpha_name[_RAlpha_index[i]:_RAlpha_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RARMNone-0]
	_ = x[RARMPC24-1]
	_ = x[RARMABS32-2]
	_ = x[RARMREL32-3]
	_ = x[RARMPC13-4]
	_ = x[RARMABS16-5]
	_ = x[RARMABS12-6]
	_ = x[RARMTHM_ABS5-7]
	_ = x[RARMABS8-8]
	_ = x[RARMSBREL32-9]
	_ = x[RARMTHM_PC22-10]
	_ = x[RARMTHM_PC8-11]
	_ = x[RARMAMP_VCALL9-12]
	_ = x[RARMSWI24-13]
	_ = x[RARMTHM_SWI8-14]
	_ = x[RARMXPC25-15]
	_ = x[RARMTHM_XPC22-16]
	_ = x[RARMTLS_DTPMOD32-17]
	_ = x[RARMTLS_DTPOFF32-18]
	_ = x[RARMTLS_TPOFF32-19]
	_ = x[RARMCOPY-20]
	_ = x[RARMGLOB_DAT-21]
	_ = x[RARMJUMP_SLOT-22]
	_ = x[RARMRELATIVE-23]
	_ = x[RARMGOTOFF-24]
	_ = x[RARMGOTPC-25]
	_ = x[RARMGOT32-26]
	_ = x[RARMPLT32-27]
	_ = x[RARMCALL-28]
	_ = x[RARMJUMP24-29]
	_ = x[RARMTHM_JUMP24-30]
	_ = x[RARMBASE_ABS-31]
	_ = x[RARMALU_PCREL_7_0-32]
	_ = x[RARMALU_PCREL_15_8-33]
	_ = x[RARMALU_PCREL_23_15-34]
	_ = x[RARMLDR_SBREL_11_10_NC-35]
	_ = x[RARMALU_SBREL_19_12_NC-36]
	_ = x[RARMALU_SBREL_27_20_CK-37]
	_ = x[RARMTARGET1-38]
	_ = x[RARMSBREL31-39]
	_ = x[RARMV4BX-40]
	_ = x[RARMTARGET2-41]
	_ = x[RARMPREL31-42]
	_ = x[RARMMOVW_ABS_NC-43]
	_ = x[RARMMOVT_ABS-44]
	_ = x[RARMMOVW_PREL_NC-45]
	_ = x[RARMMOVT_PREL-46]
	_ = x[RARMTHM_MOVW_ABS_NC-47]
	_ = x[RARMTHM_MOVT_ABS-48]
	_ = x[RARMTHM_MOVW_PREL_NC-49]
	_ = x[RARMTHM_MOVT_PREL-50]
	_ = x[RARMTHM_JUMP19-51]
	_ = x[RARMTHM_JUMP6-52]
	_ = x[RARMTHM_ALU_PREL_11_0-53]
	_ = x[RARMTHM_PC12-54]
	_ = x[RARMABS32_NOI-55]
	_ = x[RARMREL32_NOI-56]
	_ = x[RARMALU_PC_G0_NC-57]
	_ = x[RARMALU_PC_G0-58]
	_ = x[RARMALU_PC_G1_NC-59]
	_ = x[RARMALU_PC_G1-60]
	_ = x[RARMALU_PC_G2-61]
	_ = x[RARMLDR_PC_G1-62]
	_ = x[RARMLDR_PC_G2-63]
	_ = x[RARMLDRS_PC_G0-64]
	_ = x[RARMLDRS_PC_G1-65]
	_ = x[RARMLDRS_PC_G2-66]
	_ = x[RARMLDC_PC_G0-67]
	_ = x[RARMLDC_PC_G1-68]
	_ = x[RARMLDC_PC_G2-69]
	_ = x[RARMALU_SB_G0_NC-70]
	_ = x[RARMALU_SB_G0-71]
	_ = x[RARMALU_SB_G1_NC-72]
	_ = x[RARMALU_SB_G1-73]
	_ = x[RARMALU_SB_G2-74]
	_ = x[RARMLDR_SB_G0-75]
	_ = x[RARMLDR_SB_G1-76]
	_ = x[RARMLDR_SB_G2-77]
	_ = x[RARMLDRS_SB_G0-78]
	_ = x[RARMLDRS_SB_G1-79]
	_ = x[RARMLDRS_SB_G2-80]
	_ = x[RARMLDC_SB_G0-81]
	_ = x[RARMLDC_SB_G1-82]
	_ = x[RARMLDC_SB_G2-83]
	_ = x[RARMMOVW_BREL_NC-84]
	_ = x[RARMMOVT_BREL-85]
	_ = x[RARMMOVW_BREL-86]
	_ = x[RARMTHM_MOVW_BREL_NC-87]
	_ = x[RARMTHM_MOVT_BREL-88]
	_ = x[RARMTHM_MOVW_BREL-89]
	_ = x[RARMTLS_GOTDESC-90]
	_ = x[RARMTLS_CALL-91]
	_ = x[RARMTLS_DESCSEQ-92]
	_ = x[RARMTHM_TLS_CALL-93]
	_ = x[RARMPLT32_ABS-94]
	_ = x[RARMGOT_ABS-95]
	_ = x[RARMGOT_PREL-96]
	_ = x[RARMGOT_BREL12-97]
	_ = x[RARMGOTOFF12-98]
	_ = x[RARMGOTRELAX-99]
	_ = x[RARMGNU_VTENTRY-100]
	_ = x[RARMGNU_VTINHERIT-101]
	_ = x[RARMTHM_JUMP11-102]
	_ = x[RARMTHM_JUMP8-103]
	_ = x[RARMTLS_GD32-104]
	_ = x[RARMTLS_LDM32-105]
	_ = x[RARMTLS_LDO32-106]
	_ = x[RARMTLS_IE32-107]
	_ = x[RARMTLS_LE32-108]
	_ = x[RARMTLS_LDO12-109]
	_ = x[RARMTLS_LE12-110]
	_ = x[RARMTLS_IE12GP-111]
	_ = x[RARMPRIVATE_0-112]
	_ = x[RARMPRIVATE_1-113]
	_ = x[RARMPRIVATE_2-114]
	_ = x[RARMPRIVATE_3-115]
	_ = x[RARMPRIVATE_4-116]
	_ = x[RARMPRIVATE_5-117]
	_ = x[RARMPRIVATE_6-118]
	_ = x[RARMPRIVATE_7-119]
	_ = x[RARMPRIVATE_8-120]
	_ = x[RARMPRIVATE_9-121]
	_ = x[RARMPRIVATE_10-122]
	_ = x[RARMPRIVATE_11-123]
	_ = x[RARMPRIVATE_12-124]
	_ = x[RARMPRIVATE_13-125]
	_ = x[RARMPRIVATE_14-126]
	_ = x[RARMPRIVATE_15-127]
	_ = x[RARMME_TOO-128]
	_ = x[RARMTHM_TLS_DESCSEQ16-129]
	_ = x[RARMTHM_TLS_DESCSEQ32-130]
	_ = x[RARMTHM_GOT_BREL12-131]
	_ = x[RARMTHM_ALU_ABS_G0_NC-132]
	_ = x[RARMTHM_ALU_ABS_G1_NC-133]
	_ = x[RARMTHM_ALU_ABS_G2_NC-134]
	_ = x[RARMTHM_ALU_ABS_G3-135]
	_ = x[RARMIRELATIVE-160]
	_ = x[RARMRXPC25-249]
	_ = x[RARMRSBREL32-250]
	_ = x[RARMTHM_RPC22-251]
	_ = x[RARMRREL32-252]
	_ = x[RARMRABS32-253]
	_ = x[RARMRPC24-254]
	_ = x[RARMRBASE-255]
}

const (
	_RARM_name_0 = "No relocationPC24ABS32REL32PC13ABS16ABS12THM_ABS5ABS8SBREL32THM_PC22THM_PC8AMP_VCALL9SWI24THM_SWI8XPC25THM_XPC22TLS_DTPMOD32TLS_DTPOFF32TLS_TPOFF32Copy data from shared objectSet GOT entry to data addressSet GOT entry to code addressAdd load address of shared objectAdd GOT-relative symbol addressAdd PC-relative GOT table addressAdd PC-relative GOT offsetAdd PC-relative PLT offsetCALLJUMP24THM_JUMP24BASE_ABSALU_PCREL_7_0ALU_PCREL_15_8ALU_PCREL_23_15LDR_SBREL_11_10_NCALU_SBREL_19_12_NCALU_SBREL_27_20_CKTARGET1SBREL31V4BXTARGET2PREL31MOVW_ABS_NCMOVT_ABSMOVW_PREL_NCMOVT_PRELTHM_MOVW_ABS_NCTHM_MOVT_ABSTHM_MOVW_PREL_NCTHM_MOVT_PRELTHM_JUMP19THM_JUMP6THM_ALU_PREL_11_0THM_PC12ABS32_NOIREL32_NOIALU_PC_G0_NCALU_PC_G0ALU_PC_G1_NCALU_PC_G1ALU_PC_G2LDR_PC_G1LDR_PC_G2LDRS_PC_G0LDRS_PC_G1LDRS_PC_G2LDC_PC_G0LDC_PC_G1LDC_PC_G2ALU_SB_G0_NCALU_SB_G0ALU_SB_G1_NCALU_SB_G1ALU_SB_G2LDR_SB_G0LDR_SB_G1LDR_SB_G2LDRS_SB_G0LDRS_SB_G1LDRS_SB_G2LDC_SB_G0LDC_SB_G1LDC_SB_G2MOVW_BREL_NCMOVT_BRELMOVW_BRELTHM_MOVW_BREL_NCTHM_MOVT_BRELTHM_MOVW_BRELTLS_GOTDESCTLS_CALLTLS_DESCSEQTHM_TLS_CALLPLT32_ABSGOT_ABSGOT_PRELGOT_BREL12GOTOFF12GOTRELAXGNU_VTENTRYGNU_VTINHERITTHM_JUMP11THM_JUMP8TLS_GD32TLS_LDM32TLS_LDO32TLS_IE32TLS_LE32TLS_LDO12TLS_LE12TLS_IE12GPPRIVATE_0PRIVATE_1PRIVATE_2PRIVATE_3PRIVATE_4PRIVATE_5PRIVATE_6PRIVATE_7PRIVATE_8PRIVATE_9PRIVATE_10PRIVATE_11PRIVATE_12PRIVATE_13PRIVATE_14PRIVATE_15ME_TOOTHM_TLS_DESCSEQ16THM_TLS_DESCSEQ32THM_GOT_BREL12THM_ALU_ABS_G0_NCTHM_ALU_ABS_G1_NCTHM_ALU_ABS_G2_NCTHM_ALU_ABS_G3"
	_RARM_name_1 = "IRELATIVE"
	_RARM_name_2 = "RXPC25RSBREL32THM_RPC22RREL32RABS32RPC24RBASE"
)

var (
	_RARM_index_0 = [...]uint16{0, 13, 17, 22, 27, 31, 36, 41, 49, 53, 60, 68, 75, 85, 90, 98, 103, 112, 124, 136, 147, 175, 204, 233, 266, 297, 330, 356, 382, 386, 392, 402, 410, 423, 437, 452, 470, 488, 506, 513, 520, 524, 531, 537, 548, 556, 568, 577, 592, 604, 620, 633, 643, 652, 669, 677, 686, 695, 707, 716, 728, 737, 746, 755, 764, 774, 784, 794, 803, 812, 821, 833, 842, 854, 863, 872, 881, 890, 899, 909, 919, 929, 938, 947, 956, 968, 977, 986, 1002, 1015, 1028, 1039, 1047, 1058, 1070, 1079, 1086, 1094, 1104, 1112, 1120, 1131, 1144, 1154, 1163, 1171, 1180, 1189, 1197, 1205, 1214, 1222, 1232, 1241, 1250, 1259, 1268, 1277, 1286, 1295, 1304, 1313, 1322, 1332, 1342, 1352, 1362, 1372, 1382, 1388, 1405, 1422, 1436, 1453, 1470, 1487, 1501}
	_RARM_index_2 = [...]uint8{0, 6, 14, 23, 29, 35, 40, 45}
)

func (i RARM) String() string {
	switch {
	case 0 <= i && i <= 135:
		return _RARM_name_0[_RARM_index_0[i]:_RARM_index_0[i+1]]
	case i == 160:
		return _RARM_name_1
	case 249 <= i && i <= 255:
		i -= 249
		return _RARM_name_2[_RARM_index_2[i]:_RARM_index_2[i+1]]
	default:
		return "RARM(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[R386None-0]
	_ = x[R38632-1]
	_ = x[R386PC32-2]
	_ = x[R386GOT32-3]
	_ = x[R386PLT32-4]
	_ = x[R386COPY-5]
	_ = x[R386GLOB_DAT-6]
	_ = x[R386JMP_SLOT-7]
	_ = x[R386RELATIVE-8]
	_ = x[R386GOTOFF-9]
	_ = x[R386GOTPC-10]
	_ = x[R38632PLT-11]
	_ = x[R386TLS_TPOFF-14]
	_ = x[R386TLS_IE-15]
	_ = x[R386TLS_GOTIE-16]
	_ = x[R386TLS_LE-17]
	_ = x[R386TLS_GD-18]
	_ = x[R386TLS_LDM-19]
	_ = x[R38616-20]
	_ = x[R386PC16-21]
	_ = x[R3868-22]
	_ = x[R386PC8-23]
	_ = x[R386TLS_GD_32-24]
	_ = x[R386TLS_GD_PUSH-25]
	_ = x[R386TLS_GD_CALL-26]
	_ = x[R386TLS_GD_POP-27]
	_ = x[R386TLS_LDM_32-28]
	_ = x[R386TLS_LDM_PUSH-29]
	_ = x[R386TLS_LDM_CALL-30]
	_ = x[R386TLS_LDM_POP-31]
	_ = x[R386TLS_LDO_32-32]
	_ = x[R386TLS_IE_32-33]
	_ = x[R386TLS_LE_32-34]
	_ = x[R386TLS_DTPMOD32-35]
	_ = x[R386TLS_DTPOFF32-36]
	_ = x[R386TLS_TPOFF32-37]
	_ = x[R386SIZE32-38]
	_ = x[R386TLS_GOTDESC-39]
	_ = x[R386TLS_DESC_CALL-40]
	_ = x[R386TLS_DESC-41]
	_ = x[R386IRELATIVE-42]
	_ = x[R386GOT32X-43]
}

const (
	_R386_name_0 = "No relocationAdd symbol valueAdd PC-relative symbol valueAdd PC-relative GOT offsetAdd PC-relative PLT offsetCopy data from shared objectSet GOT entry to data addressSet GOT entry to code addressAdd load address of shared objectAdd GOT-relative symbol addressAdd PC-relative GOT table address32PLT"
	_R386_name_1 = "Negative offset in static TLS blockAbsolute address of GOT for -ve static TLSGOT entry for negative static TLS blockNegative offset relative to static TLS32 bit offset to GOT (index,off) pair32 bit offset to GOT (index,zero) pair16PC168PC832 bit offset to GOT (index,off) pairpushl instruction for Sun ABI GD sequencecall instruction for Sun ABI GD sequencepopl instruction for Sun ABI GD sequence32 bit offset to GOT (index,zero) pairpushl instruction for Sun ABI LD sequencecall instruction for Sun ABI LD sequencepopl instruction for Sun ABI LD sequence32 bit offset from start of TLS block32 bit offset to GOT static TLS offset entry32 bit offset within static TLS blockGOT entry containing TLS indexGOT entry containing TLS offsetGOT entry of -ve static TLS offsetSIZE32TLS_GOTDESCTLS_DESC_CALLTLS_DESCIRELATIVEGOT32X"
)

var (
	_R386_index_0 = [...]uint16{0, 13, 29, 57, 83, 109, 137, 166, 195, 228, 259, 292, 297}
	_R386_index_1 = [...]uint16{0, 35, 77, 116, 154, 191, 229, 231, 235, 236, 239, 276, 317, 357, 397, 435, 476, 516, 556, 593, 637, 674, 704, 735, 769, 775, 786, 799, 807, 816, 822}
)

func (i R386) String() string {
	switch {
	case 0 <= i && i <= 11:
		return _R386_name_0[_R386_index_0[i]:_R386_index_0[i+1]]
	case 14 <= i && i <= 43:
		i -= 14
		return _R386_name_1[_R386_index_1[i]:_R386_index_1[i+1]]
	default:
		return "R386(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RMIPSNone-0]
	_ = x[RMIPS16-1]
	_ = x[RMIPS32-2]
	_ = x[RMIPSREL32-3]
	_ = x[RMIPS26-4]
	_ = x[RMIPSHI16-5]
	_ = x[RMIPSLO16-6]
	_ = x[RMIPSGPREL16-7]
	_ = x[RMIPSLITERAL-8]
	_ = x[RMIPSGOT16-9]
	_ = x[RMIPSPC16-10]
	_ = x[RMIPSCALL16-11]
	_ = x[RMIPSGPREL32-12]
	_ = x[RMIPSSHIFT5-16]
	_ = x[RMIPSSHIFT6-17]
	_ = x[RMIPS64-18]
	_ = x[RMIPSGOT_DISP-19]
	_ = x[RMIPSGOT_PAGE-20]
	_ = x[RMIPSGOT_OFST-21]
	_ = x[RMIPSGOT_HI16-22]
	_ = x[RMIPSGOT_LO16-23]
	_ = x[RMIPSSUB-24]
	_ = x[RMIPSINSERT_A-25]
	_ = x[RMIPSINSERT_B-26]
	_ = x[RMIPSDELETE-27]
	_ = x[RMIPSHIGHER-28]
	_ = x[RMIPSHIGHEST-29]
	_ = x[RMIPSCALL_HI16-30]
	_ = x[RMIPSCALL_LO16-31]
	_ = x[RMIPSSCN_DISP-32]
	_ = x[RMIPSREL16-33]
	_ = x[RMIPSADD_IMMEDIATE-34]
	_ = x[RMIPSPJUMP-35]
	_ = x[RMIPSRELGOT-36]
	_ = x[RMIPSJALR-37]
	_ = x[RMIPSTLS_DTPMOD32-38]
	_ = x[RMIPSTLS_DTPREL32-39]
	_ = x[RMIPSTLS_DTPMOD64-40]
	_ = x[RMIPSTLS_DTPREL64-41]
	_ = x[RMIPSTLS_GD-42]
	_ = x[RMIPSTLS_LDM-43]
	_ = x[RMIPSTLS_DTPREL_HI16-44]
	_ = x[RMIPSTLS_DTPREL_LO16-45]
	_ = x[RMIPSTLS_GOTTPREL-46]
	_ = x[RMIPSTLS_TPREL32-47]
	_ = x[RMIPSTLS_TPREL64-48]
	_ = x[RMIPSTLS_TPREL_HI16-49]
	_ = x[RMIPSTLS_TPREL_LO16-50]
	_ = x[RMIPSPC32-248]
}

const (
	_RMIPS_name_0 = "No relocation1632REL3226high 16 bits of symbol valuelow 16 bits of symbol valueGP-relative referenceReference to literal sectionReference to global offset table16 bit PC relative reference16 bit call through glbl offset tblGPREL32"
	_RMIPS_name_1 = "SHIFT5SHIFT664GOT_DISPGOT_PAGEGOT_OFSTGOT_HI16GOT_LO16SUBINSERT_AINSERT_BDELETEHIGHERHIGHESTCALL_HI16CALL_LO16SCN_DISPREL16ADD_IMMEDIATEPJUMPRELGOTJALRModule number 32 bitModule-relative offset 32 bitModule number 64 bitModule-relative offset 64 bit16 bit GOT offset for GD16 bit GOT offset for LDMModule-relative offset, high 16 bitsModule-relative offset, low 16 bits16 bit GOT offset for IETP-relative offset, 32 bitTP-relative offset, 64 bitTP-relative offset, high 16 bitsTP-relative offset, low 16 bits"
	_RMIPS_name_2 = "32 bit PC relative reference"
)

var (
	_RMIPS_index_0 = [...]uint8{0, 13, 15, 17, 22, 24, 52, 79, 100, 128, 160, 188, 223, 230}
	_RMIPS_index_1 = [...]uint16{0, 6, 12, 14, 22, 30, 38, 46, 54, 57, 65, 73, 79, 85, 92, 101, 110, 118, 123, 136, 141, 147, 151, 171, 200, 220, 249, 273, 298, 334, 369, 393, 419, 445, 477, 508}
)

func (i RMIPS) String() string {
	switch {
	case 0 <= i && i <= 12:
		return _RMIPS_name_0[_RMIPS_index_0[i]:_RMIPS_index_0[i+1]]
	case 16 <= i && i <= 50:
		i -= 16
		return _RMIPS_name_1[_RMIPS_index_1[i]:_RMIPS_index_1[i+1]]
	case i == 248:
		return _RMIPS_name_2
	default:
		return "RMIPS(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RLoongArchNone-0]
	_ = x[RLoongArch32-1]
	_ = x[RLoongArch64-2]
	_ = x[RLoongArchRELATIVE-3]
	_ = x[RLoongArchCOPY-4]
	_ = x[RLoongArchJUMP_SLOT-5]
	_ = x[RLoongArchTLS_DTPMOD32-6]
	_ = x[RLoongArchTLS_DTPMOD64-7]
	_ = x[RLoongArchTLS_DTPREL32-8]
	_ = x[RLoongArchTLS_DTPREL64-9]
	_ = x[RLoongArchTLS_TPREL32-10]
	_ = x[RLoongArchTLS_TPREL64-11]
	_ = x[RLoongArchIRELATIVE-12]
	_ = x[RLoongArchMARK_LA-20]
	_ = x[RLoongArchMARK_PCREL-21]
	_ = x[RLoongArchSOP_PUSH_PCREL-22]
	_ = x[RLoongArchSOP_PUSH_ABSOLUTE-23]
	_ = x[RLoongArchSOP_PUSH_DUP-24]
	_ = x[RLoongArchSOP_PUSH_GPREL-25]
	_ = x[RLoongArchSOP_PUSH_TLS_TPREL-26]
	_ = x[RLoongArchSOP_PUSH_TLS_GOT-27]
	_ = x[RLoongArchSOP_PUSH_TLS_GD-28]
	_ = x[RLoongArchSOP_PUSH_PLT_PCREL-29]
	_ = x[RLoongArchSOP_ASSERT-30]
	_ = x[RLoongArchSOP_NOT-31]
	_ = x[RLoongArchSOP_SUB-32]
	_ = x[RLoongArchSOP_SL-33]
	_ = x[RLoongArchSOP_SR-34]
	_ = x[RLoongArchSOP_ADD-35]
	_ = x[RLoongArchSOP_AND-36]
	_ = x[RLoongArchSOP_IF_ELSE-37]
	_ = x[RLoongArchSOP_POP_32_S_10_5-38]
	_ = x[RLoongArchSOP_POP_32_U_10_12-39]
	_ = x[RLoongArchSOP_POP_32_S_10_12-40]
	_ = x[RLoongArchSOP_POP_32_S_10_16-41]
	_ = x[RLoongArchSOP_POP_32_S_10_16_S2-42]
	_ = x[RLoongArchSOP_POP_32_S_5_20-43]
	_ = x[RLoongArchSOP_POP_32_S_0_5_10_16_S2-44]
	_ = x[RLoongArchSOP_POP_32_S_0_10_10_16_S2-45]
	_ = x[RLoongArchSOP_POP_32_U-46]
	_ = x[RLoongArchADD8-47]
	_ = x[RLoongArchADD16-48]
	_ = x[RLoongArchADD24-49]
	_ = x[RLoongArchADD32-50]
	_ = x[RLoongArchADD64-51]
	_ = x[RLoongArchSUB8-52]
	_ = x[RLoongArchSUB16-53]
	_ = x[RLoongArchSUB24-54]
	_ = x[RLoongArchSUB32-55]
	_ = x[RLoongArchSUB64-56]
	_ = x[RLoongArchGNU_VTINHERIT-57]
	_ = x[RLoongArchGNU_VTENTRY-58]
	_ = x[RLoongArchB16-64]
	_ = x[RLoongArchB21-65]
	_ = x[RLoongArchB26-66]
	_ = x[RLoongArchABS_HI20-67]
	_ = x[RLoongArchABS_LO12-68]
	_ = x[RLoongArchABS64_LO20-69]
	_ = x[RLoongArchABS64_HI12-70]
	_ = x[RLoongArchPCALA_HI20-71]
	_ = x[RLoongArchPCALA_LO12-72]
	_ = x[RLoongArchPCALA64_LO20-73]
	_ = x[RLoongArchPCALA64_HI12-74]
	_ = x[RLoongArchGOT_PC_HI20-75]
	_ = x[RLoongArchGOT_PC_LO12-76]
	_ = x[RLoongArchGOT64_PC_LO20-77]
	_ = x[RLoongArchGOT64_PC_HI12-78]
	_ = x[RLoongArchGOT_HI20-79]
	_ = x[RLoongArchGOT_LO12-80]
	_ = x[RLoongArchGOT64_LO20-81]
	_ = x[RLoongArchGOT64_HI12-82]
	_ = x[RLoongArchTLS_LE_HI20-83]
	_ = x[RLoongArchTLS_LE_LO12-84]
	_ = x[RLoongArchTLS_LE64_LO20-85]
	_ = x[RLoongArchTLS_LE64_HI12-86]
	_ = x[RLoongArchTLS_IE_PC_HI20-87]
	_ = x[RLoongArchTLS_IE_PC_LO12-88]
	_ = x[RLoongArchTLS_IE64_PC_LO20-89]
	_ = x[RLoongArchTLS_IE64_PC_HI12-90]
	_ = x[RLoongArchTLS_IE_HI20-91]
	_ = x[RLoongArchTLS_IE_LO12-92]
	_ = x[RLoongArchTLS_IE64_LO20-93]
	_ = x[RLoongArchTLS_IE64_HI12-94]
	_ = x[RLoongArchTLS_LD_PC_HI20-95]
	_ = x[RLoongArchTLS_LD_HI20-96]
	_ = x[RLoongArchTLS_GD_PC_HI20-97]
	_ = x[RLoongArchTLS_GD_HI20-98]
	_ = x[RLoongArch32_PCREL-99]
	_ = x[RLoongArchRELAX-100]
	_ = x[RLoongArchDELETE-101]
	_ = x[RLoongArchALIGN-102]
	_ = x[RLoongArchPCREL20_S2-103]
	_ = x[RLoongArchCFA-104]
	_ = x[RLoongArchADD6-105]
	_ = x[RLoongArchSUB6-106]
	_ = x[RLoongArchADD_ULEB128-107]
	_ = x[RLoongArchSUB_ULEB128-108]
	_ = x[RLoongArch64_PCREL-109]
}

const (
	_RLoongArch_name_0 = "None3264RELATIVECOPYJUMP_SLOTTLS_DTPMOD32TLS_DTPMOD64TLS_DTPREL32TLS_DTPREL64TLS_TPREL32TLS_TPREL64IRELATIVE"
	_RLoongArch_name_1 = "MARK_LAMARK_PCRELSOP_PUSH_PCRELSOP_PUSH_ABSOLUTESOP_PUSH_DUPSOP_PUSH_GPRELSOP_PUSH_TLS_TPRELSOP_PUSH_TLS_GOTSOP_PUSH_TLS_GDSOP_PUSH_PLT_PCRELSOP_ASSERTSOP_NOTSOP_SUBSOP_SLSOP_SRSOP_ADDSOP_ANDSOP_IF_ELSESOP_POP_32_S_10_5SOP_POP_32_U_10_12SOP_POP_32_S_10_12SOP_POP_32_S_10_16SOP_POP_32_S_10_16_S2SOP_POP_32_S_5_20SOP_POP_32_S_0_5_10_16_S2SOP_POP_32_S_0_10_10_16_S2SOP_POP_32_UADD8ADD16ADD24ADD32ADD64SUB8SUB16SUB24SUB32SUB64GNU_VTINHERITGNU_VTENTRY"
	_RLoongArch_name_2 = "B16B21B26ABS_HI20ABS_LO12ABS64_LO20ABS64_HI12PCALA_HI20PCALA_LO12PCALA64_LO20PCALA64_HI12GOT_PC_HI20GOT_PC_LO12GOT64_PC_LO20GOT64_PC_HI12GOT_HI20GOT_LO12GOT64_LO20GOT64_HI12TLS_LE_HI20TLS_LE_LO12TLS_LE64_LO20TLS_LE64_HI12TLS_IE_PC_HI20TLS_IE_PC_LO12TLS_IE64_PC_LO20TLS_IE64_PC_HI12TLS_IE_HI20TLS_IE_LO12TLS_IE64_LO20TLS_IE64_HI12TLS_LD_PC_HI20TLS_LD_HI20TLS_GD_PC_HI20TLS_GD_HI2032_PCRELRELAXDELETEALIGNPCREL20_S2CFAADD6SUB6ADD_ULEB128SUB_ULEB12864_PCREL"
)

var (
	_RLoongArch_index_0 = [...]uint8{0, 4, 6, 8, 16, 20, 29, 41, 53, 65, 77, 88, 99, 108}
	_RLoongArch_index_1 = [...]uint16{0, 7, 17, 31, 48, 60, 74, 92, 108, 123, 141, 151, 158, 165, 171, 177, 184, 191, 202, 219, 237, 255, 273, 294, 311, 336, 362, 374, 378, 383, 388, 393, 398, 402, 407, 412, 417, 422, 435, 446}
	_RLoongArch_index_2 = [...]uint16{0, 3, 6, 9, 17, 25, 35, 45, 55, 65, 77, 89, 100, 111, 124, 137, 145, 153, 163, 173, 184, 195, 208, 221, 235, 249, 265, 281, 292, 303, 316, 329, 343, 354, 368, 379, 387, 392, 398, 403, 413, 416, 420, 424, 435, 446, 454}
)

func (i RLoongArch) String() string {
	switch {
	case 0 <= i && i <= 12:
		return _RLoongArch_name_0[_RLoongArch_index_0[i]:_RLoongArch_index_0[i+1]]
	case 20 <= i && i <= 58:
		i -= 20
		return _RLoongArch_name_1[_RLoongArch_index_1[i]:_RLoongArch_index_1[i+1]]
	case 64 <= i && i <= 109:
		i -= 64
		return _RLoongArch_name_2[_RLoongArch_index_2[i]:_RLoongArch_index_2[i+1]]
	default:
		return "RLoongArch(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RPPCNone-0]
	_ = x[RPPCADDR32-1]
	_ = x[RPPCADDR24-2]
	_ = x[RPPCADDR16-3]
	_ = x[RPPCADDR16_LO-4]
	_ = x[RPPCADDR16_HI-5]
	_ = x[RPPCADDR16_HA-6]
	_ = x[RPPCADDR14-7]
	_ = x[RPPCADDR14_BRTAKEN-8]
	_ = x[RPPCADDR14_BRNTAKEN-9]
	_ = x[RPPCREL24-10]
	_ = x[RPPCREL14-11]
	_ = x[RPPCREL14_BRTAKEN-12]
	_ = x[RPPCREL14_BRNTAKEN-13]
	_ = x[RPPCGOT16-14]
	_ = x[RPPCGOT16_LO-15]
	_ = x[RPPCGOT16_HI-16]
	_ = x[RPPCGOT16_HA-17]
	_ = x[RPPCPLTREL24-18]
	_ = x[RPPCCOPY-19]
	_ = x[RPPCGLOB_DAT-20]
	_ = x[RPPCJMP_SLOT-21]
	_ = x[RPPCRELATIVE-22]
	_ = x[RPPCLOCAL24PC-23]
	_ = x[RPPCUADDR32-24]
	_ = x[RPPCUADDR16-25]
	_ = x[RPPCREL32-26]
	_ = x[RPPCPLT32-27]
	_ = x[RPPCPLTREL32-28]
	_ = x[RPPCPLT16_LO-29]
	_ = x[RPPCPLT16_HI-30]
	_ = x[RPPCPLT16_HA-31]
	_ = x[RPPCSDAREL16-32]
	_ = x[RPPCSECTOFF-33]
	_ = x[RPPCSECTOFF_LO-34]
	_ = x[RPPCSECTOFF_HI-35]
	_ = x[RPPCSECTOFF_HA-36]
	_ = x[RPPCTLS-67]
	_ = x[RPPCDTPMOD32-68]
	_ = x[RPPCTPREL16-69]
	_ = x[RPPCTPREL16_LO-70]
	_ = x[RPPCTPREL16_HI-71]
	_ = x[RPPCTPREL16_HA-72]
	_ = x[RPPCTPREL32-73]
	_ = x[RPPCDTPREL16-74]
	_ = x[RPPCDTPREL16_LO-75]
	_ = x[RPPCDTPREL16_HI-76]
	_ = x[RPPCDTPREL16_HA-77]
	_ = x[RPPCDTPREL32-78]
	_ = x[RPPCGOT_TLSGD16-79]
	_ = x[RPPCGOT_TLSGD16_LO-80]
	_ = x[RPPCGOT_TLSGD16_HI-81]
	_ = x[RPPCGOT_TLSGD16_HA-82]
	_ = x[RPPCGOT_TLSLD16-83]
	_ = x[RPPCGOT_TLSLD16_LO-84]
	_ = x[RPPCGOT_TLSLD16_HI-85]
	_ = x[RPPCGOT_TLSLD16_HA-86]
	_ = x[RPPCGOT_TPREL16-87]
	_ = x[RPPCGOT_TPREL16_LO-88]
	_ = x[RPPCGOT_TPREL16_HI-89]
	_ = x[RPPCGOT_TPREL16_HA-90]
	_ = x[RPPCEMB_NADDR32-101]
	_ = x[RPPCEMB_NADDR16-102]
	_ = x[RPPCEMB_NADDR16_LO-103]
	_ = x[RPPCEMB_NADDR16_HI-104]
	_ = x[RPPCEMB_NADDR16_HA-105]
	_ = x[RPPCEMB_SDAI16-106]
	_ = x[RPPCEMB_SDA2I16-107]
	_ = x[RPPCEMB_SDA2REL-108]
	_ = x[RPPCEMB_SDA21-109]
	_ = x[RPPCEMB_MRKREF-110]
	_ = x[RPPCEMB_RELSEC16-111]
	_ = x[RPPCEMB_RELST_LO-112]
	_ = x[RPPCEMB_RELST_HI-113]
	_ = x[RPPCEMB_RELST_HA-114]
	_ = x[RPPCEMB_BIT_FLD-115]
	_ = x[RPPCEMB_RELSDA-116]
}

const (
	_RPPC_name_0 = "NoneADDR32ADDR24ADDR16ADDR16_LOADDR16_HIADDR16_HAADDR14ADDR14_BRTAKENADDR14_BRNTAKENREL24REL14REL14_BRTAKENREL14_BRNTAKENGOT16GOT16_LOGOT16_HIGOT16_HAPLTREL24COPYGLOB_DATJMP_SLOTRELATIVELOCAL24PCUADDR32UADDR16REL32PLT32PLTREL32PLT16_LOPLT16_HIPLT16_HASDAREL16SECTOFFSECTOFF_LOSECTOFF_HISECTOFF_HA"
	_RPPC_name_1 = "TLSDTPMOD32TPREL16TPREL16_LOTPREL16_HITPREL16_HATPREL32DTPREL16DTPREL16_LODTPREL16_HIDTPREL16_HADTPREL32GOT_TLSGD16GOT_TLSGD16_LOGOT_TLSGD16_HIGOT_TLSGD16_HAGOT_TLSLD16GOT_TLSLD16_LOGOT_TLSLD16_HIGOT_TLSLD16_HAGOT_TPREL16GOT_TPREL16_LOGOT_TPREL16_HIGOT_TPREL16_HA"
	_RPPC_name_2 = "EMB_NADDR32EMB_NADDR16EMB_NADDR16_LOEMB_NADDR16_HIEMB_NADDR16_HAEMB_SDAI16EMB_SDA2I16EMB_SDA2RELEMB_SDA21EMB_MRKREFEMB_RELSEC16EMB_RELST_LOEMB_RELST_HIEMB_RELST_HAEMB_BIT_FLDEMB_RELSDA"
)

var (
	_RPPC_index_0 = [...]uint16{0, 4, 10, 16, 22, 31, 40, 49, 55, 69, 84, 89, 94, 107, 121, 126, 134, 142, 150, 158, 162, 170, 178, 186, 195, 202, 209, 214, 219, 227, 235, 243, 251, 259, 266, 276, 286, 296}
	_RPPC_index_1 = [...]uint16{0, 3, 11, 18, 28, 38, 48, 55, 63, 74, 85, 96, 104, 115, 129, 143, 157, 168, 182, 196, 210, 221, 235, 249, 263}
	_RPPC_index_2 = [...]uint8{0, 11, 22, 36, 50, 64, 74, 85, 96, 105, 115, 127, 139, 151, 163, 174, 184}
)

func (i RPPC) String() string {
	switch {
	case 0 <= i && i <= 36:
		return _RPPC_name_0[_RPPC_index_0[i]:_RPPC_index_0[i+1]]
	case 67 <= i && i <= 90:
		i -= 67
		return _RPPC_name_1[_RPPC_index_1[i]:_RPPC_index_1[i+1]]
	case 101 <= i && i <= 116:
		i -= 101
		return _RPPC_name_2[_RPPC_index_2[i]:_RPPC_index_2[i+1]]
	default:
		return "RPPC(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RPPC64None-0]
	_ = x[RPPC64ADDR32-1]
	_ = x[RPPC64ADDR24-2]
	_ = x[RPPC64ADDR16-3]
	_ = x[RPPC64ADDR16_LO-4]
	_ = x[RPPC64ADDR16_HI-5]
	_ = x[RPPC64ADDR16_HA-6]
	_ = x[RPPC64ADDR14-7]
	_ = x[RPPC64ADDR14_BRTAKEN-8]
	_ = x[RPPC64ADDR14_BRNTAKEN-9]
	_ = x[RPPC64REL24-10]
	_ = x[RPPC64REL14-11]
	_ = x[RPPC64REL14_BRTAKEN-12]
	_ = x[RPPC64REL14_BRNTAKEN-13]
	_ = x[RPPC64GOT16-14]
	_ = x[RPPC64GOT16_LO-15]
	_ = x[RPPC64GOT16_HI-16]
	_ = x[RPPC64GOT16_HA-17]
	_ = x[RPPC64COPY-19]
	_ = x[RPPC64GLOB_DAT-20]
	_ = x[RPPC64JMP_SLOT-21]
	_ = x[RPPC64RELATIVE-22]
	_ = x[RPPC64UADDR32-24]
	_ = x[RPPC64UADDR16-25]
	_ = x[RPPC64REL32-26]
	_ = x[RPPC64PLT32-27]
	_ = x[RPPC64PLTREL32-28]
	_ = x[RPPC64PLT16_LO-29]
	_ = x[RPPC64PLT16_HI-30]
	_ = x[RPPC64PLT16_HA-31]
	_ = x[RPPC64SECTOFF-33]
	_ = x[RPPC64SECTOFF_LO-34]
	_ = x[RPPC64SECTOFF_HI-35]
	_ = x[RPPC64SECTOFF_HA-36]
	_ = x[RPPC64REL30-37]
	_ = x[RPPC64ADDR64-38]
	_ = x[RPPC64ADDR16_HIGHER-39]
	_ = x[RPPC64ADDR16_HIGHERA-40]
	_ = x[RPPC64ADDR16_HIGHEST-41]
	_ = x[RPPC64ADDR16_HIGHESTA-42]
	_ = x[RPPC64UADDR64-43]
	_ = x[RPPC64REL64-44]
	_ = x[RPPC64PLT64-45]
	_ = x[RPPC64PLTREL64-46]
	_ = x[RPPC64TOC16-47]
	_ = x[RPPC64TOC16_LO-48]
	_ = x[RPPC64TOC16_HI-49]
	_ = x[RPPC64TOC16_HA-50]
	_ = x[RPPC64TOC-51]
	_ = x[RPPC64PLTGOT16-52]
	_ = x[RPPC64PLTGOT16_LO-53]
	_ = x[RPPC64PLTGOT16_HI-54]
	_ = x[RPPC64PLTGOT16_HA-55]
	_ = x[RPPC64ADDR16_DS-56]
	_ = x[RPPC64ADDR16_LO_DS-57]
	_ = x[RPPC64GOT16_DS-58]
	_ = x[RPPC64GOT16_LO_DS-59]
	_ = x[RPPC64PLT16_LO_DS-60]
	_ = x[RPPC64SECTOFF_DS-61]
	_ = x[RPPC64SECTOFF_LO_DS-62]
	_ = x[RPPC64TOC16_DS-63]
	_ = x[RPPC64TOC16_LO_DS-64]
	_ = x[RPPC64PLTGOT16_DS-65]
	_ = x[RPPC64PLTGOT_LO_DS-66]
	_ = x[RPPC64TLS-67]
	_ = x[RPPC64DTPMOD64-68]
	_ = x[RPPC64TPREL16-69]
	_ = x[RPPC64TPREL16_LO-70]
	_ = x[RPPC64TPREL16_HI-71]
	_ = x[RPPC64TPREL16_HA-72]
	_ = x[RPPC64TPREL64-73]
	_ = x[RPPC64DTPREL16-74]
	_ = x[RPPC64DTPREL16_LO-75]
	_ = x[RPPC64DTPREL16_HI-76]
	_ = x[RPPC64DTPREL16_HA-77]
	_ = x[RPPC64DTPREL64-78]
	_ = x[RPPC64GOT_TLSGD16-79]
	_ = x[RPPC64GOT_TLSGD16_LO-80]
	_ = x[RPPC64GOT_TLSGD16_HI-81]
	_ = x[RPPC64GOT_TLSGD16_HA-82]
	_ = x[RPPC64GOT_TLSLD16-83]
	_ = x[RPPC64GOT_TLSLD16_LO-84]
	_ = x[RPPC64GOT_TLSLD16_HI-85]
	_ = x[RPPC64GOT_TLSLD16_HA-86]
	_ = x[RPPC64GOT_TPREL16_DS-87]
	_ = x[RPPC64GOT_TPREL16_LO_DS-88]
	_ = x[RPPC64GOT_TPREL16_HI-89]
	_ = x[RPPC64GOT_TPREL16_HA-90]
	_ = x[RPPC64GOT_DTPREL16_DS-91]
	_ = x[RPPC64GOT_DTPREL16_LO_DS-92]
	_ = x[RPPC64GOT_DTPREL16_HI-93]
	_ = x[RPPC64GOT_DTPREL16_HA-94]
	_ = x[RPPC64TPREL16_DS-95]
	_ = x[RPPC64TPREL16_LO_DS-96]
	_ = x[RPPC64TPREL16_HIGHER-97]
	_ = x[RPPC64TPREL16_HIGHERA-98]
	_ = x[RPPC64TPREL16_HIGHEST-99]
	_ = x[RPPC64TPREL16_HIGHESTA-10]
	_ = x[RPPC64DTPREL16_DS-10]
	_ = x[RPPC64DTPREL16_LO_DS-10]
	_ = x[RPPC64DTPREL16_HIGHER-10]
	_ = x[RPPC64DTPREL16_HIGHERA-10]
	_ = x[RPPC64DTPREL16_HIGHEST-10]
	_ = x[RPPC64DTPREL16_HIGHESTA-10]
	_ = x[RPPC64TLSGD-10]
	_ = x[RPPC64TLSLD-10]
	_ = x[RPPC64TOCSAVE-10]
	_ = x[RPPC64ADDR16_HIGH-11]
	_ = x[RPPC64ADDR16_HIGHA-11]
	_ = x[RPPC64TPREL16_HIGH-11]
	_ = x[RPPC64TPREL16_HIGHA-11]
	_ = x[RPPC64DTPREL16_HIGH-11]
	_ = x[RPPC64DTPREL16_HIGHA-11]
	_ = x[RPPC64REL24_NOTOC-11]
	_ = x[RPPC64ADDR64_LOCAL-11]
	_ = x[RPPC64ENTRY-11]
	_ = x[RPPC64PLTSEQ-11]
	_ = x[RPPC64PLTCALL-12]
	_ = x[RPPC64PLTSEQ_NOTOC-12]
	_ = x[RPPC64PLTCALL_NOTOC-12]
	_ = x[RPPC64PCREL_OPT-12]
	_ = x[RPPC64REL24_P9NOTOC-12]
	_ = x[RPPC64D34-12]
	_ = x[RPPC64D34_LO-12]
	_ = x[RPPC64D34_HI30-13]
	_ = x[RPPC64D34_HA30-13]
	_ = x[RPPC64PCREL34-13]
	_ = x[RPPC64GOT_PCREL34-13]
	_ = x[RPPC64PLT_PCREL34-13]
	_ = x[RPPC64PLT_PCREL34_NOTOC-13]
	_ = x[RPPC64ADDR16_HIGHER34-13]
	_ = x[RPPC64ADDR16_HIGHERA34-13]
	_ = x[RPPC64ADDR16_HIGHEST34-13]
	_ = x[RPPC64ADDR16_HIGHESTA34-13]
	_ = x[RPPC64REL16_HIGHER34-14]
	_ = x[RPPC64REL16_HIGHERA34-14]
	_ = x[RPPC64REL16_HIGHEST34-14]
	_ = x[RPPC64REL16_HIGHESTA34-14]
	_ = x[RPPC64D28-14]
	_ = x[RPPC64PCREL28-14]
	_ = x[RPPC64TPREL34-14]
	_ = x[RPPC64DTPREL34-14]
	_ = x[RPPC64GOT_TLSGD_PCREL34-14]
	_ = x[RPPC64GOT_TLSLD_PCREL34-14]
	_ = x[RPPC64GOT_TPREL_PCREL34-15]
	_ = x[RPPC64GOT_DTPREL_PCREL34-15]
	_ = x[RPPC64REL16_HIGH-24]
	_ = x[RPPC64REL16_HIGHA-24]
	_ = x[RPPC64REL16_HIGHER-24]
	_ = x[RPPC64REL16_HIGHERA-24]
	_ = x[RPPC64REL16_HIGHEST-24]
	_ = x[RPPC64REL16_HIGHESTA-24]
	_ = x[RPPC64REL16DX_HA-246]
	_ = x[RPPC64JMP_IREL-24]
	_ = x[RPPC64IRELATIVE-248]
	_ = x[RPPC64REL16-249]
	_ = x[RPPC64REL16_LO-250]
	_ = x[RPPC64REL16_HI-251]
	_ = x[RPPC64REL16_HA-252]
	_ = x[RPPC64GNU_VTINHERIT-25]
	_ = x[RPPC64GNU_VTENTRY-25]
}

const (
	_RPPC64_name_0 = "NoneADDR32ADDR24ADDR16ADDR16_LOADDR16_HIADDR16_HAADDR14ADDR14_BRTAKENADDR14_BRNTAKENREL24REL14REL14_BRTAKENREL14_BRNTAKENGOT16GOT16_LOGOT16_HIGOT16_HA"
	_RPPC64_name_1 = "COPYGLOB_DATJMP_SLOTRELATIVE"
	_RPPC64_name_2 = "UADDR32UADDR16REL32PLT32PLTREL32PLT16_LOPLT16_HIPLT16_HA"
	_RPPC64_name_3 = "SECTOFFSECTOFF_LOSECTOFF_HISECTOFF_HAREL30ADDR64ADDR16_HIGHERADDR16_HIGHERAADDR16_HIGHESTADDR16_HIGHESTAUADDR64REL64PLT64PLTREL64TOC16TOC16_LOTOC16_HITOC16_HATOCPLTGOT16PLTGOT16_LOPLTGOT16_HIPLTGOT16_HAADDR16_DSADDR16_LO_DSGOT16_DSGOT16_LO_DSPLT16_LO_DSSECTOFF_DSSECTOFF_LO_DSTOC16_DSTOC16_LO_DSPLTGOT16_DSPLTGOT_LO_DSTLSDTPMOD64TPREL16TPREL16_LOTPREL16_HITPREL16_HATPREL64DTPREL16DTPREL16_LODTPREL16_HIDTPREL16_HADTPREL64GOT_TLSGD16GOT_TLSGD16_LOGOT_TLSGD16_HIGOT_TLSGD16_HAGOT_TLSLD16GOT_TLSLD16_LOGOT_TLSLD16_HIGOT_TLSLD16_HAGOT_TPREL16_DSGOT_TPREL16_LO_DSGOT_TPREL16_HIGOT_TPREL16_HAGOT_DTPREL16_DSGOT_DTPREL16_LO_DSGOT_DTPREL16_HIGOT_DTPREL16_HATPREL16_DSTPREL16_LO_DSTPREL16_HIGHERTPREL16_HIGHERATPREL16_HIGHEST"
	_RPPC64_name_4 = "REL16DX_HA"
	_RPPC64_name_5 = "IRELATIVEREL16REL16_LOREL16_HIREL16_HA"
)

var (
	_RPPC64_index_0 = [...]uint8{0, 4, 10, 16, 22, 31, 40, 49, 55, 69, 84, 89, 94, 107, 121, 126, 134, 142, 150}
	_RPPC64_index_1 = [...]uint8{0, 4, 12, 20, 28}
	_RPPC64_index_2 = [...]uint8{0, 7, 14, 19, 24, 32, 40, 48, 56}
	_RPPC64_index_3 = [...]uint16{0, 7, 17, 27, 37, 42, 48, 61, 75, 89, 104, 111, 116, 121, 129, 134, 142, 150, 158, 161, 169, 180, 191, 202, 211, 223, 231, 242, 253, 263, 276, 284, 295, 306, 318, 321, 329, 336, 346, 356, 366, 373, 381, 392, 403, 414, 422, 433, 447, 461, 475, 486, 500, 514, 528, 542, 559, 573, 587, 602, 620, 635, 650, 660, 673, 687, 702, 717}
	_RPPC64_index_5 = [...]uint8{0, 9, 14, 22, 30, 38}
)

func (i RPPC64) String() string {
	switch {
	case 0 <= i && i <= 17:
		return _RPPC64_name_0[_RPPC64_index_0[i]:_RPPC64_index_0[i+1]]
	case 19 <= i && i <= 22:
		i -= 19
		return _RPPC64_name_1[_RPPC64_index_1[i]:_RPPC64_index_1[i+1]]
	case 24 <= i && i <= 31:
		i -= 24
		return _RPPC64_name_2[_RPPC64_index_2[i]:_RPPC64_index_2[i+1]]
	case 33 <= i && i <= 99:
		i -= 33
		return _RPPC64_name_3[_RPPC64_index_3[i]:_RPPC64_index_3[i+1]]
	case i == 246:
		return _RPPC64_name_4
	case 248 <= i && i <= 252:
		i -= 248
		return _RPPC64_name_5[_RPPC64_index_5[i]:_RPPC64_index_5[i+1]]
	default:
		return "RPPC64(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RRISCVNone-0]
	_ = x[RRISCV32-1]
	_ = x[RRISCV64-2]
	_ = x[RRISCVRELATIVE-3]
	_ = x[RRISCVCOPY-4]
	_ = x[RRISCVJUMP_SLOT-5]
	_ = x[RRISCVTLS_DTPMOD32-6]
	_ = x[RRISCVTLS_DTPMOD64-7]
	_ = x[RRISCVTLS_DTPREL32-8]
	_ = x[RRISCVTLS_DTPREL64-9]
	_ = x[RRISCVTLS_TPREL32-10]
	_ = x[RRISCVTLS_TPREL64-11]
	_ = x[RRISCVBRANCH-16]
	_ = x[RRISCVJAL-17]
	_ = x[RRISCVCALL-18]
	_ = x[RRISCVCALL_PLT-19]
	_ = x[RRISCVGOT_HI20-20]
	_ = x[RRISCVTLS_GOT_HI20-21]
	_ = x[RRISCVTLS_GD_HI20-22]
	_ = x[RRISCVPCREL_HI20-23]
	_ = x[RRISCVPCREL_LO12_I-24]
	_ = x[RRISCVPCREL_LO12_S-25]
	_ = x[RRISCVHI20-26]
	_ = x[RRISCVLO12_I-27]
	_ = x[RRISCVLO12_S-28]
	_ = x[RRISCVTPREL_HI20-29]
	_ = x[RRISCVTPREL_LO12_I-30]
	_ = x[RRISCVTPREL_LO12_S-31]
	_ = x[RRISCVTPREL_ADD-32]
	_ = x[RRISCVADD8-33]
	_ = x[RRISCVADD16-34]
	_ = x[RRISCVADD32-35]
	_ = x[RRISCVADD64-36]
	_ = x[RRISCVSUB8-37]
	_ = x[RRISCVSUB16-38]
	_ = x[RRISCVSUB32-39]
	_ = x[RRISCVSUB64-40]
	_ = x[RRISCVGNU_VTINHERIT-41]
	_ = x[RRISCVGNU_VTENTRY-42]
	_ = x[RRISCVALIGN-43]
	_ = x[RRISCVRVC_BRANCH-44]
	_ = x[RRISCVRVC_JUMP-45]
	_ = x[RRISCVRVC_LUI-46]
	_ = x[RRISCVGPREL_I-47]
	_ = x[RRISCVGPREL_S-48]
	_ = x[RRISCVTPREL_I-49]
	_ = x[RRISCVTPREL_S-50]
	_ = x[RRISCVRELAX-51]
	_ = x[RRISCVSUB6-52]
	_ = x[RRISCVSET6-53]
	_ = x[RRISCVSET8-54]
	_ = x[RRISCVSET16-55]
	_ = x[RRISCVSET32-56]
	_ = x[RRISCV32_PCREL-57]
}

const (
	_RRISCV_name_0 = "No relocationAdd 32 bit zero extended symbol valueAdd 64 bit symbol valueAdd load address of shared objectCopy data from shared objectSet GOT entry to code address32 bit ID of module containing symbolID of module containing symbol32 bit relative offset in TLS blockRelative offset in TLS block32 bit relative offset in static TLS blockRelative offset in static TLS block"
	_RRISCV_name_1 = "PC-relative branchPC-relative jumpPC-relative callPC-relative call (PLT)PC-relative GOT referencePC-relative TLS IE GOT offsetPC-relative TLS GD referencePC-relative referencePC-relative referencePC-relative referenceAbsolute addressAbsolute addressAbsolute addressTLS LE thread offsetTLS LE thread offsetTLS LE thread offsetTLS LE thread usage8-bit label addition16-bit label addition32-bit label addition64-bit label addition8-bit label subtraction16-bit label subtraction32-bit label subtraction64-bit label subtractionGNU C++ vtable hierarchyGNU C++ vtable member usageAlignment statementPC-relative branch offsetPC-relative jump offsetAbsolute addressGP-relative referenceGP-relative referenceTP-relative TLS LE loadTP-relative TLS LE storeInstruction pair can be relaxedLocal label subtractionLocal label subtractionLocal label subtractionLocal label subtractionLocal label subtraction32-bit PC relative"
)

var (
	_RRISCV_index_0 = [...]uint16{0, 13, 50, 73, 106, 134, 163, 200, 230, 265, 293, 335, 370}
	_RRISCV_index_1 = [...]uint16{0, 18, 34, 50, 72, 97, 126, 154, 175, 196, 217, 233, 249, 265, 285, 305, 325, 344, 364, 385, 406, 427, 450, 474, 498, 522, 546, 573, 592, 617, 640, 656, 677, 698, 721, 745, 776, 799, 822, 845, 868, 891, 909}
)

func (i RRISCV) String() string {
	switch {
	case 0 <= i && i <= 11:
		return _RRISCV_name_0[_RRISCV_index_0[i]:_RRISCV_index_0[i+1]]
	case 16 <= i && i <= 57:
		i -= 16
		return _RRISCV_name_1[_RRISCV_index_1[i]:_RRISCV_index_1[i+1]]
	default:
		return "RRISCV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
