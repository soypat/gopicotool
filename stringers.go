// Code generated by "stringer -type=ImageType,ExeCPU,ExeChip,ExeSec,ItemType -linecomment -output stringers.go ."; DO NOT EDIT.

package picobin

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ImageTypeInvalid-0]
	_ = x[ImageTypeExecutable-1]
	_ = x[ImageTypeData-2]
}

const _ImageType_name = "invalidexecutabledata"

var _ImageType_index = [...]uint8{0, 7, 17, 21}

func (i ImageType) String() string {
	if i >= ImageType(len(_ImageType_index)-1) {
		return "ImageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ImageType_name[_ImageType_index[i]:_ImageType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExeCPUARM-0]
	_ = x[ExeCPURISCV-1]
}

const _ExeCPU_name = "ARMRISCV"

var _ExeCPU_index = [...]uint8{0, 3, 8}

func (i ExeCPU) String() string {
	if i >= ExeCPU(len(_ExeCPU_index)-1) {
		return "ExeCPU(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ExeCPU_name[_ExeCPU_index[i]:_ExeCPU_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExeChipRP2040-0]
	_ = x[ExeChipRP2350-1]
}

const _ExeChip_name = "RP2040RP2350"

var _ExeChip_index = [...]uint8{0, 6, 12}

func (i ExeChip) String() string {
	if i >= ExeChip(len(_ExeChip_index)-1) {
		return "ExeChip(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ExeChip_name[_ExeChip_index[i]:_ExeChip_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExeSecNonSecure-0]
	_ = x[ExeSecSecure-1]
}

const _ExeSec_name = "Non-SecureSecure"

var _ExeSec_index = [...]uint8{0, 10, 16}

func (i ExeSec) String() string {
	if i >= ExeSec(len(_ExeSec_index)-1) {
		return "ExeSec(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ExeSec_name[_ExeSec_index[i]:_ExeSec_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ItemTypeVectorTable-3]
	_ = x[ItemTypeRollingWindowDelta-5]
	_ = x[ItemTypeRollingLoadMap-6]
	_ = x[ItemTypeSignature-9]
	_ = x[ItemTypePartitionTable-10]
	_ = x[ItemTypeSalt-12]
	_ = x[ItemTypeNextBlockOffset-65]
	_ = x[ItemTypeImageDef-66]
	_ = x[ItemTypeEntryPoint-68]
	_ = x[ItemTypeHashDef-71]
	_ = x[ItemTypeVersion-72]
	_ = x[ItemTypeHashValue-75]
	_ = x[ItemTypeIgnored-126]
	_ = x[ItemTypeLast-127]
}

const (
	_ItemType_name_0 = "vector table"
	_ItemType_name_1 = "rolling window deltaload map"
	_ItemType_name_2 = "signaturepartition table"
	_ItemType_name_3 = "salt"
	_ItemType_name_4 = "next block offsetimage def"
	_ItemType_name_5 = "entry point"
	_ItemType_name_6 = "hash defversion"
	_ItemType_name_7 = "hash value"
	_ItemType_name_8 = "ignoredlast"
)

var (
	_ItemType_index_1 = [...]uint8{0, 20, 28}
	_ItemType_index_2 = [...]uint8{0, 9, 24}
	_ItemType_index_4 = [...]uint8{0, 17, 26}
	_ItemType_index_6 = [...]uint8{0, 8, 15}
	_ItemType_index_8 = [...]uint8{0, 7, 11}
)

func (i ItemType) String() string {
	switch {
	case i == 3:
		return _ItemType_name_0
	case 5 <= i && i <= 6:
		i -= 5
		return _ItemType_name_1[_ItemType_index_1[i]:_ItemType_index_1[i+1]]
	case 9 <= i && i <= 10:
		i -= 9
		return _ItemType_name_2[_ItemType_index_2[i]:_ItemType_index_2[i+1]]
	case i == 12:
		return _ItemType_name_3
	case 65 <= i && i <= 66:
		i -= 65
		return _ItemType_name_4[_ItemType_index_4[i]:_ItemType_index_4[i+1]]
	case i == 68:
		return _ItemType_name_5
	case 71 <= i && i <= 72:
		i -= 71
		return _ItemType_name_6[_ItemType_index_6[i]:_ItemType_index_6[i+1]]
	case i == 75:
		return _ItemType_name_7
	case 126 <= i && i <= 127:
		i -= 126
		return _ItemType_name_8[_ItemType_index_8[i]:_ItemType_index_8[i+1]]
	default:
		return "ItemType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
