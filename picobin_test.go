package picobin

import (
	"encoding/hex"
	"testing"
)

func TestBlinkyParse(t *testing.T) {
	blinky := blinkyFlash()
	start0, end, err := NextBlockIdx(blinky)
	if err != nil {
		t.Fatal(err)
	}
	blk0, n, err := DecodeBlock(blinky[start0:end])
	if err != nil {
		t.Error(err)
	} else if n != end-start0 {
		t.Errorf("expected %d bytes read, got %d", end-start0, n)
	}
	if len(blk0.Items) != 1 {
		t.Errorf("expected 1 item in block, got %d", len(blk0.Items))
	}
	if blk0.Items[0].ItemType() != ItemTypeImageDef {
		t.Errorf("expected image type, got %s", blk0.Items[0].String())
	}

	start1 := start0 + blk0.Link
	blk1, _, err := DecodeBlock(blinky[start1:])
	if err != nil {
		t.Error(err)
	}
	start2 := start1 + blk1.Link
	if start2 != start0 {
		t.Errorf("expected 2 blocks only, second linking to first, got start2=%d", start2)
	}
	t.Logf("BLOCK0:%s  BLOCK1:%s", blk0, blk1)
}

// At addr 10000000
const blinkyTextHex = ""

// At addr 10001464 = 10000000+len(blinkyTextHex), so these are contiguous, unlike FlashEnd.
const blinkyRODataHex = "48656c6c6f2c20776f726c64210000000a2a2a2a2050414e4943202a2a2a0a000a000000486172647761726520616c61726d20256420616c726561647920636c61696d656400000048617264206173736572740052656c6561736500302e3100322e302e300000007069636f32000000626c696e6b00000053657020313520323032340006005250d3f07542b8140010060052503abca911c014001006005250abb36053c414001006005250bbff3cb6cc14001006005250861c0302d4140010060052505422a29ddc14001005005250de65f468bc1600100d0a0000"

// At addr 100016a8  is not contiguous.
const blinkyFlashEndHex = "d3defffffe010000ff01000090eaffff793512ab"

func blinkyFlash() []byte {
	const flashAddr = 0x10000000
	const flashEndAddr = 0x100016a8
	const blinkyHex = blinkyTextHex + blinkyRODataHex
	flashEnd, _ := hex.DecodeString(blinkyFlashEndHex)
	blinky, _ := hex.DecodeString(blinkyHex)
	blinky = append(blinky, make([]byte, flashEndAddr-flashAddr-len(blinky))...)
	blinky = append(blinky, flashEnd...)
	return blinky
}
